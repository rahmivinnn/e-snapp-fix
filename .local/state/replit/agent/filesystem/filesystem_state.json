{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is an energy monitoring web application called \"e-snapp\" built with a modern full-stack architecture. The application provides real-time energy consumption tracking, billing management, and energy usage analytics for residential users. It features a mobile-first responsive design with live data visualization, WebSocket-based real-time updates, and comprehensive energy management tools including consumption trends, billing summaries, and user notifications.\n\n**Latest Update (Aug 2, 2025)**: Successfully implemented full PWA (Progressive Web App) functionality with ultra-compact mobile optimization. Application is now installable as a native app on mobile devices and features no-scroll mobile design with 11px base font size. Deployed to insight-flow-ajunjuniantoro.replit.app with all PWA features active.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\nUI Requirements: Highly interactive screens with smooth animations, transitions, and visual feedback on all elements.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React 18 with TypeScript using Vite as the build tool\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **UI Components**: Radix UI primitives with custom shadcn/ui components\n- **Styling**: Tailwind CSS with CSS custom properties for theming\n- **Charts**: Chart.js for data visualization and energy consumption graphs\n- **Real-time Updates**: WebSocket client integration for live energy data\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js server framework\n- **Database ORM**: Drizzle ORM with PostgreSQL dialect\n- **API Design**: RESTful API with real-time WebSocket server\n- **Development**: Hot module replacement with Vite middleware in development\n- **Build**: ESBuild for production server bundling\n\n## Data Storage\n- **Database**: PostgreSQL with Neon serverless driver\n- **Schema**: Relational design with tables for users, energy data, billing, notifications, and user settings\n- **Migration**: Drizzle Kit for database schema management\n- **Session Storage**: connect-pg-simple for PostgreSQL-backed session storage\n- **Fallback Storage**: In-memory storage implementation for development/demo purposes\n\n## Real-time Features\n- **WebSocket Server**: Built-in WebSocket server for real-time energy data broadcasting\n- **Live Charts**: Automatic chart updates with incoming energy data\n- **Data Simulation**: Server-side energy data simulation for demo purposes\n- **Client Synchronization**: Automatic reconnection and data synchronization\n\n## Authentication & User Management\n- **User System**: Complete user management with profiles and settings\n- **Demo Mode**: Pre-configured demo user for immediate application testing\n- **Settings Management**: User preferences for notifications and energy alerts\n- **Profile Management**: User profile with contact information and preferences\n- **Interactive Onboarding**: Complete flow with splash → login/signup → onboarding → device setup → home\n- **Social Login**: Google and Apple login with authentic SVG logos and hover animations\n\n## Interactive Features & Animations\n- **Splash Screen**: Animated logo entrance, progress bar loading, gradient backgrounds (ultra-compact h-12 logo)\n- **Login/Signup**: Button hover/scale effects, loading states with spinners, form slide animations\n- **Onboarding**: Smooth slide transitions between steps, image blur/focus effects, floating background animations\n- **Setup Wizard**: Loading states on all buttons, hover effects, gradient backgrounds, smooth transitions\n- **Home Dashboard**: Card hover effects, animated icons (spinning, bouncing), staggered load animations, pulse effects on real-time data\n- **Universal Interactions**: All buttons and cards have hover effects, loading states, and smooth transitions\n\n## PWA Features (Added Aug 2, 2025)\n- **Progressive Web App**: Full PWA implementation with manifest.json and service worker\n- **Install Capability**: Automatic install button appears on compatible devices\n- **Offline Support**: Service worker caching for offline functionality\n- **Native App Experience**: Standalone display mode when installed\n- **Mobile Optimization**: Ultra-compact design with 11px base font, minimal padding (px-2), no vertical scrolling\n- **Real-time Updates**: Push notification support ready for energy alerts\n\n# External Dependencies\n\n## Database Services\n- **Neon Database**: Serverless PostgreSQL hosting with connection pooling\n- **Drizzle ORM**: Type-safe database access and query building\n\n## UI Component Libraries\n- **Radix UI**: Accessible component primitives for complex UI elements\n- **Lucide React**: Icon library for consistent iconography\n- **Chart.js**: Canvas-based charting library for energy data visualization\n\n## Development Tools\n- **Vite**: Fast development server and build tool with HMR\n- **TypeScript**: Type safety across frontend and backend\n- **Tailwind CSS**: Utility-first CSS framework with custom design system\n- **React Hook Form**: Form state management with validation\n\n## Validation & Utilities\n- **Zod**: Runtime type validation and schema validation\n- **date-fns**: Date manipulation and formatting utilities\n- **clsx & tailwind-merge**: Conditional CSS class management\n\n## Replit Integration\n- **Replit Vite Plugins**: Development environment integration and error handling\n- **Cartographer**: Code navigation and development tools integration","size_bytes":5545},"start-prod.js":{"content":"#!/usr/bin/env node\nimport { exec } from 'child_process';\n\n// Start the production server\nconst server = exec('NODE_ENV=production node dist/index.js', {\n  cwd: process.cwd(),\n  env: { ...process.env, NODE_ENV: 'production' }\n});\n\nserver.stdout.on('data', (data) => {\n  console.log(data.toString());\n});\n\nserver.stderr.on('data', (data) => {\n  console.error(data.toString());\n});\n\nserver.on('exit', (code) => {\n  console.log(`Server exited with code ${code}`);\n});\n\n// Keep the process alive\nprocess.on('SIGINT', () => {\n  server.kill();\n  process.exit(0);\n});","size_bytes":560},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport path from \"path\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { seedDatabase } from \"./seed\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Serve static files with proper MIME types for PWA\napp.use(express.static('public', {\n  setHeaders: (res, path) => {\n    if (path.endsWith('.js')) {\n      res.setHeader('Content-Type', 'application/javascript');\n    } else if (path.endsWith('.json')) {\n      res.setHeader('Content-Type', 'application/json');\n    } else if (path.endsWith('.svg')) {\n      res.setHeader('Content-Type', 'image/svg+xml');\n    }\n  }\n}));\n\n// Serve reset page\napp.get('/reset', (req, res) => {\n  res.sendFile(path.join(process.cwd(), 'reset_app.html'));\n});\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  // Seed the database with demo data\n  await seedDatabase();\n  \n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2736},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer } from \"ws\";\nimport { storage } from \"./storage\";\nimport { insertEnergyDataSchema, insertNotificationSchema } from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  const httpServer = createServer(app);\n  \n  // WebSocket server for real-time data on a different path to avoid conflicts\n  const wss = new WebSocketServer({ \n    server: httpServer,\n    path: '/energy-ws' // Use a specific path to avoid conflicts with Vite HMR\n  });\n  \n  // Simulate real-time energy data updates\n  setInterval(() => {\n    const realtimeData = {\n      activePower: Math.random() * 100 + 200,\n      reactivePower: Math.random() * 50 + 200,\n      voltage: 220 + Math.random() * 10,\n      powerFactor: 0.4 + Math.random() * 0.2,\n      timestamp: new Date().toISOString(),\n    };\n    \n    wss.clients.forEach((client) => {\n      if (client.readyState === 1) { // WebSocket.OPEN\n        client.send(JSON.stringify({ type: 'energy-update', data: realtimeData }));\n      }\n    });\n  }, 3000); // Update every 3 seconds\n\n  // Energy data routes\n  app.get(\"/api/energy/latest/:userId\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const latestData = await storage.getLatestEnergyData(userId);\n      res.json(latestData);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch latest energy data\" });\n    }\n  });\n\n  app.get(\"/api/energy/history/:userId\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 50;\n      const energyData = await storage.getEnergyData(userId, limit);\n      res.json(energyData);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch energy history\" });\n    }\n  });\n\n  app.post(\"/api/energy\", async (req, res) => {\n    try {\n      const validatedData = insertEnergyDataSchema.parse(req.body);\n      const energyData = await storage.createEnergyData(validatedData);\n      res.json(energyData);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid energy data\" });\n    }\n  });\n\n  // Billing data routes\n  app.get(\"/api/billing/:userId\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const billingData = await storage.getBillingData(userId);\n      res.json(billingData);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch billing data\" });\n    }\n  });\n\n  // Notifications routes\n  app.get(\"/api/notifications/:userId\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const notifications = await storage.getNotifications(userId);\n      res.json(notifications);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch notifications\" });\n    }\n  });\n\n  app.post(\"/api/notifications\", async (req, res) => {\n    try {\n      const validatedData = insertNotificationSchema.parse(req.body);\n      const notification = await storage.createNotification(validatedData);\n      res.json(notification);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid notification data\" });\n    }\n  });\n\n  app.patch(\"/api/notifications/:id/read\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.markNotificationAsRead(id);\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to mark notification as read\" });\n    }\n  });\n\n  // User settings routes\n  app.get(\"/api/settings/:userId\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const settings = await storage.getUserSettings(userId);\n      res.json(settings);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch user settings\" });\n    }\n  });\n\n  app.patch(\"/api/settings/:userId\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const settings = await storage.updateUserSettings(userId, req.body);\n      res.json(settings);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update user settings\" });\n    }\n  });\n\n  // User routes\n  app.get(\"/api/user/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const user = await storage.getUser(id);\n      if (!user) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n      res.json(user);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch user\" });\n    }\n  });\n\n  // Support contact route\n  app.post(\"/api/support/contact\", async (req, res) => {\n    try {\n      const { subject, message, userId } = req.body;\n      \n      // In a real application, this would send an email or create a support ticket\n      // For now, we'll create a notification\n      const notification = await storage.createNotification({\n        userId,\n        title: \"Support Request Received\",\n        message: `Your support request about \"${subject}\" has been received. We'll get back to you soon.`,\n        type: \"info\",\n      });\n      \n      res.json({ success: true, notification });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to submit support request\" });\n    }\n  });\n\n  return httpServer;\n}\n","size_bytes":5267},"server/storage.ts":{"content":"import { users, energyData, billingData, notifications, userSettings, type User, type InsertUser, type EnergyData, type InsertEnergyData, type BillingData, type InsertBillingData, type Notification, type InsertNotification, type UserSettings, type InsertUserSettings } from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, sql } from \"drizzle-orm\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  getEnergyData(userId: string, limit?: number): Promise<EnergyData[]>;\n  createEnergyData(data: InsertEnergyData): Promise<EnergyData>;\n  getLatestEnergyData(userId: string): Promise<EnergyData | undefined>;\n  getBillingData(userId: string): Promise<BillingData | undefined>;\n  createBillingData(data: InsertBillingData): Promise<BillingData>;\n  getNotifications(userId: string): Promise<Notification[]>;\n  createNotification(notification: InsertNotification): Promise<Notification>;\n  markNotificationAsRead(id: string): Promise<void>;\n  getUserSettings(userId: string): Promise<UserSettings | undefined>;\n  createUserSettings(settings: InsertUserSettings): Promise<UserSettings>;\n  updateUserSettings(userId: string, settings: Partial<UserSettings>): Promise<UserSettings>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private energyData: Map<string, EnergyData[]>;\n  private billingData: Map<string, BillingData>;\n  private notifications: Map<string, Notification[]>;\n  private userSettings: Map<string, UserSettings>;\n\n  constructor() {\n    this.users = new Map();\n    this.energyData = new Map();\n    this.billingData = new Map();\n    this.notifications = new Map();\n    this.userSettings = new Map();\n    \n    // Initialize with demo user and data\n    this.initializeDemoData();\n  }\n\n  private initializeDemoData() {\n    const demoUserId = \"demo-user-1\";\n    const demoUser: User = {\n      id: demoUserId,\n      username: \"inayat\",\n      email: \"inayatalikatif@gmail.com\",\n      name: \"Inayat Ali\",\n      password: \"demo123\",\n      createdAt: new Date(),\n    };\n    \n    this.users.set(demoUserId, demoUser);\n    \n    // Initialize energy data\n    const energyDataPoints: EnergyData[] = [];\n    for (let i = 0; i < 100; i++) {\n      energyDataPoints.push({\n        id: randomUUID(),\n        userId: demoUserId,\n        timestamp: new Date(Date.now() - i * 60000), // Every minute for last 100 minutes\n        activePower: (Math.random() * 100 + 200).toString(),\n        reactivePower: (Math.random() * 50 + 200).toString(),\n        voltage: (220 + Math.random() * 10).toString(),\n        powerFactor: (0.4 + Math.random() * 0.2).toString(),\n        consumption: (Math.random() * 5 + 10).toString(),\n      });\n    }\n    this.energyData.set(demoUserId, energyDataPoints);\n    \n    // Initialize billing data\n    const billing: BillingData = {\n      id: randomUUID(),\n      userId: demoUserId,\n      period: \"01 Jul - 31 Aug 2025\",\n      currentBill: \"57.00\",\n      energyUsed: \"129.5\",\n      contract: \"Bioraria (F1/F23)\",\n      estimatedFinalBill: \"83.40\",\n      co2Emitted: \"42.7\",\n      co2Avoided: \"12.1\",\n    };\n    this.billingData.set(demoUserId, billing);\n    \n    // Initialize notifications\n    const notificationsList: Notification[] = [\n      {\n        id: randomUUID(),\n        userId: demoUserId,\n        title: \"Energy Usage Alert\",\n        message: \"Your consumption is 15% higher than usual today.\",\n        type: \"warning\",\n        read: false,\n        createdAt: new Date(Date.now() - 7200000), // 2 hours ago\n      },\n      {\n        id: randomUUID(),\n        userId: demoUserId,\n        title: \"Savings Opportunity\",\n        message: \"Switch to Green Energy Plan and save €8.80 monthly.\",\n        type: \"success\",\n        read: false,\n        createdAt: new Date(Date.now() - 86400000), // 1 day ago\n      },\n    ];\n    this.notifications.set(demoUserId, notificationsList);\n    \n    // Initialize user settings\n    const settings: UserSettings = {\n      id: randomUUID(),\n      userId: demoUserId,\n      energyAlerts: true,\n      billingReminders: true,\n      savingsTips: false,\n      systemUpdates: true,\n    };\n    this.userSettings.set(demoUserId, settings);\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id, createdAt: new Date() };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async getEnergyData(userId: string, limit = 50): Promise<EnergyData[]> {\n    const data = this.energyData.get(userId) || [];\n    return data.slice(0, limit).sort((a, b) => \n      new Date(b.timestamp!).getTime() - new Date(a.timestamp!).getTime()\n    );\n  }\n\n  async createEnergyData(data: InsertEnergyData): Promise<EnergyData> {\n    const id = randomUUID();\n    const energyDataPoint: EnergyData = { \n      ...data, \n      id, \n      timestamp: new Date(),\n      activePower: data.activePower || \"245\",\n      reactivePower: data.reactivePower || \"246\",\n      voltage: data.voltage || \"220\",\n      powerFactor: data.powerFactor || \"0.5\",\n      consumption: data.consumption || \"14.7\",\n    };\n    \n    const userEnergyData = this.energyData.get(data.userId) || [];\n    userEnergyData.unshift(energyDataPoint);\n    // Keep only last 100 records\n    if (userEnergyData.length > 100) {\n      userEnergyData.pop();\n    }\n    this.energyData.set(data.userId, userEnergyData);\n    \n    return energyDataPoint;\n  }\n\n  async getLatestEnergyData(userId: string): Promise<EnergyData | undefined> {\n    const data = this.energyData.get(userId) || [];\n    return data[0];\n  }\n\n  async getBillingData(userId: string): Promise<BillingData | undefined> {\n    return this.billingData.get(userId);\n  }\n\n  async createBillingData(data: InsertBillingData): Promise<BillingData> {\n    const id = randomUUID();\n    const billing: BillingData = { \n      ...data, \n      id,\n      currentBill: data.currentBill || \"0.00\",\n      energyUsed: data.energyUsed || \"0.00\",\n      contract: data.contract || \"Standard\",\n      estimatedFinalBill: data.estimatedFinalBill || \"0.00\",\n      co2Emitted: data.co2Emitted || \"0.00\",\n      co2Avoided: data.co2Avoided || \"0.00\",\n    };\n    this.billingData.set(data.userId, billing);\n    return billing;\n  }\n\n  async getNotifications(userId: string): Promise<Notification[]> {\n    const notifications = this.notifications.get(userId) || [];\n    return notifications.sort((a, b) => \n      new Date(b.createdAt!).getTime() - new Date(a.createdAt!).getTime()\n    );\n  }\n\n  async createNotification(notification: InsertNotification): Promise<Notification> {\n    const id = randomUUID();\n    const newNotification: Notification = { \n      ...notification, \n      id, \n      read: notification.read || false,\n      createdAt: new Date() \n    };\n    \n    const userNotifications = this.notifications.get(notification.userId) || [];\n    userNotifications.unshift(newNotification);\n    this.notifications.set(notification.userId, userNotifications);\n    \n    return newNotification;\n  }\n\n  async markNotificationAsRead(id: string): Promise<void> {\n    for (const [userId, notifications] of Array.from(this.notifications.entries())) {\n      const notification = notifications.find((n: any) => n.id === id);\n      if (notification) {\n        notification.read = true;\n        break;\n      }\n    }\n  }\n\n  async getUserSettings(userId: string): Promise<UserSettings | undefined> {\n    return this.userSettings.get(userId);\n  }\n\n  async createUserSettings(settings: InsertUserSettings): Promise<UserSettings> {\n    const id = randomUUID();\n    const userSettings: UserSettings = { \n      ...settings, \n      id,\n      energyAlerts: settings.energyAlerts ?? true,\n      billingReminders: settings.billingReminders ?? true,\n      savingsTips: settings.savingsTips ?? false,\n      systemUpdates: settings.systemUpdates ?? true,\n    };\n    this.userSettings.set(settings.userId, userSettings);\n    return userSettings;\n  }\n\n  async updateUserSettings(userId: string, updates: Partial<UserSettings>): Promise<UserSettings> {\n    const existing = this.userSettings.get(userId);\n    if (!existing) {\n      throw new Error(\"User settings not found\");\n    }\n    \n    const updated = { ...existing, ...updates };\n    this.userSettings.set(userId, updated);\n    return updated;\n  }\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n\n  async getEnergyData(userId: string, limit: number = 100): Promise<EnergyData[]> {\n    return await db\n      .select()\n      .from(energyData)\n      .where(eq(energyData.userId, userId))\n      .orderBy(desc(energyData.timestamp))\n      .limit(limit);\n  }\n\n  async createEnergyData(data: InsertEnergyData): Promise<EnergyData> {\n    const [energy] = await db\n      .insert(energyData)\n      .values(data)\n      .returning();\n    return energy;\n  }\n\n  async getLatestEnergyData(userId: string): Promise<EnergyData | undefined> {\n    const [latest] = await db\n      .select()\n      .from(energyData)\n      .where(eq(energyData.userId, userId))\n      .orderBy(desc(energyData.timestamp))\n      .limit(1);\n    return latest || undefined;\n  }\n\n  async getBillingData(userId: string): Promise<BillingData | undefined> {\n    const [billing] = await db\n      .select()\n      .from(billingData)\n      .where(eq(billingData.userId, userId))\n      .orderBy(desc(billingData.id))\n      .limit(1);\n    return billing || undefined;\n  }\n\n  async createBillingData(data: InsertBillingData): Promise<BillingData> {\n    const [billing] = await db\n      .insert(billingData)\n      .values(data)\n      .returning();\n    return billing;\n  }\n\n  async getNotifications(userId: string): Promise<Notification[]> {\n    return await db\n      .select()\n      .from(notifications)\n      .where(eq(notifications.userId, userId))\n      .orderBy(desc(notifications.createdAt));\n  }\n\n  async createNotification(notification: InsertNotification): Promise<Notification> {\n    const [notif] = await db\n      .insert(notifications)\n      .values(notification)\n      .returning();\n    return notif;\n  }\n\n  async markNotificationAsRead(id: string): Promise<void> {\n    await db\n      .update(notifications)\n      .set({ read: true })\n      .where(eq(notifications.id, id));\n  }\n\n  async getUserSettings(userId: string): Promise<UserSettings | undefined> {\n    const [settings] = await db\n      .select()\n      .from(userSettings)\n      .where(eq(userSettings.userId, userId));\n    return settings || undefined;\n  }\n\n  async createUserSettings(settings: InsertUserSettings): Promise<UserSettings> {\n    const [userSetting] = await db\n      .insert(userSettings)\n      .values(settings)\n      .returning();\n    return userSetting;\n  }\n\n  async updateUserSettings(userId: string, settingsUpdate: Partial<UserSettings>): Promise<UserSettings> {\n    const [updated] = await db\n      .update(userSettings)\n      .set(settingsUpdate)\n      .where(eq(userSettings.userId, userId))\n      .returning();\n    return updated;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":11901},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, timestamp, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  name: text(\"name\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const energyData = pgTable(\"energy_data\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  timestamp: timestamp(\"timestamp\").defaultNow(),\n  activePower: text(\"active_power\"),\n  reactivePower: text(\"reactive_power\"),\n  voltage: text(\"voltage\"),\n  powerFactor: text(\"power_factor\"),\n  consumption: text(\"consumption\"),\n});\n\nexport const billingData = pgTable(\"billing_data\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  period: text(\"period\").notNull(),\n  currentBill: text(\"current_bill\"),\n  energyUsed: text(\"energy_used\"),\n  contract: text(\"contract\"),\n  estimatedFinalBill: text(\"estimated_final_bill\"),\n  co2Emitted: text(\"co2_emitted\"),\n  co2Avoided: text(\"co2_avoided\"),\n});\n\nexport const notifications = pgTable(\"notifications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  title: text(\"title\").notNull(),\n  message: text(\"message\").notNull(),\n  type: text(\"type\").notNull(), // 'info', 'warning', 'success', 'error'\n  read: boolean(\"read\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const userSettings = pgTable(\"user_settings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  energyAlerts: boolean(\"energy_alerts\").default(true),\n  billingReminders: boolean(\"billing_reminders\").default(true),\n  savingsTips: boolean(\"savings_tips\").default(false),\n  systemUpdates: boolean(\"system_updates\").default(true),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  email: true,\n  password: true,\n  name: true,\n});\n\nexport const insertEnergyDataSchema = createInsertSchema(energyData).omit({\n  id: true,\n  timestamp: true,\n});\n\nexport const insertBillingDataSchema = createInsertSchema(billingData).omit({\n  id: true,\n});\n\nexport const insertNotificationSchema = createInsertSchema(notifications).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertUserSettingsSchema = createInsertSchema(userSettings).omit({\n  id: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type EnergyData = typeof energyData.$inferSelect;\nexport type InsertEnergyData = z.infer<typeof insertEnergyDataSchema>;\nexport type BillingData = typeof billingData.$inferSelect;\nexport type InsertBillingData = z.infer<typeof insertBillingDataSchema>;\nexport type Notification = typeof notifications.$inferSelect;\nexport type InsertNotification = z.infer<typeof insertNotificationSchema>;\nexport type UserSettings = typeof userSettings.$inferSelect;\nexport type InsertUserSettings = z.infer<typeof insertUserSettingsSchema>;\n","size_bytes":3447},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Splash from \"@/pages/splash\";\nimport Login from \"@/pages/login\";\nimport SignUp from \"@/pages/signup\";\nimport Onboarding from \"@/pages/onboarding\";\nimport Home from \"@/pages/home\";\nimport Trends from \"@/pages/trends\";\nimport Realtime from \"@/pages/realtime\";\nimport Economics from \"@/pages/economics\";\nimport Menu from \"@/pages/menu\";\nimport Settings from \"@/pages/settings\";\nimport SetupWizard from \"@/pages/setup-wizard\";\n\nimport BottomNavigation from \"@/components/layout/bottom-navigation\";\nimport NotificationModal from \"@/components/modals/notification-modal\";\nimport NotificationSettingsModal from \"@/components/modals/notification-settings-modal\";\nimport ContactSupportModal from \"@/components/modals/contact-support-modal\";\nimport ProfileModal from \"@/components/modals/profile-modal\";\nimport TariffModal from \"@/components/modals/tariff-modal\";\n\nimport NotFound from \"@/pages/not-found\";\nimport { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\n\n\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/splash\" component={Splash} />\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/signup\" component={SignUp} />\n      <Route path=\"/onboarding\" component={Onboarding} />\n      <Route path=\"/setup-wizard\" component={SetupWizard} />\n      <Route path=\"/home\" component={Home} />\n      <Route path=\"/trends\" component={Trends} />\n      <Route path=\"/realtime\" component={Realtime} />\n      <Route path=\"/economics\" component={Economics} />\n      <Route path=\"/menu\" component={Menu} />\n      <Route path=\"/settings\" component={Settings} />\n      <Route path=\"/\" component={Splash} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  const [location, setLocation] = useLocation();\n  const [hasCompletedSetup, setHasCompletedSetup] = useState(false);\n  const [showSplash, setShowSplash] = useState(true);\n  const [activeModals, setActiveModals] = useState({\n    notifications: false,\n    notificationSettings: false,\n    contactSupport: false,\n    profile: false,\n    tariffs: false,\n  });\n\n  // Force splash screen on first load\n  useEffect(() => {\n    console.log('🚀 App loaded, current location:', location);\n    \n    // Always show splash first\n    if (location === '/' && showSplash) {\n      console.log('🎬 Redirecting to splash screen');\n      setLocation('/splash');\n    }\n    \n    const setupCompleted = localStorage.getItem('setupCompleted');\n    setHasCompletedSetup(!!setupCompleted);\n  }, [location, setLocation, showSplash]);\n\n  const openModal = (modalName: keyof typeof activeModals) => {\n    setActiveModals(prev => ({ ...prev, [modalName]: true }));\n  };\n\n  const closeModal = (modalName: keyof typeof activeModals) => {\n    setActiveModals(prev => ({ ...prev, [modalName]: false }));\n  };\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <div className=\"min-h-screen bg-background\">\n          <div className={hasCompletedSetup ? \"pb-20\" : \"\"}>\n            <Router />\n          </div>\n          {hasCompletedSetup && <BottomNavigation />}\n          \n          {/* Modals */}\n          <NotificationModal \n            isOpen={activeModals.notifications}\n            onClose={() => closeModal('notifications')}\n          />\n          <NotificationSettingsModal\n            isOpen={activeModals.notificationSettings}\n            onClose={() => closeModal('notificationSettings')}\n            onOpen={() => openModal('notificationSettings')}\n          />\n          <ContactSupportModal\n            isOpen={activeModals.contactSupport}\n            onClose={() => closeModal('contactSupport')}\n            onOpen={() => openModal('contactSupport')}\n          />\n          <ProfileModal\n            isOpen={activeModals.profile}\n            onClose={() => closeModal('profile')}\n            onOpen={() => openModal('profile')}\n          />\n          <TariffModal\n            isOpen={activeModals.tariffs}\n            onClose={() => closeModal('tariffs')}\n            onOpen={() => openModal('tariffs')}\n          />\n        </div>\n        <Toaster />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":4443},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(199, 100%, 99%);\n  --foreground: hsl(199, 14%, 15%);\n  --muted: hsl(199, 30%, 96%);\n  --muted-foreground: hsl(199, 5%, 45%);\n  --popover: hsl(199, 100%, 99%);\n  --popover-foreground: hsl(199, 14%, 15%);\n  --card: hsl(199, 100%, 99%);\n  --card-foreground: hsl(199, 14%, 15%);\n  --border: hsl(199, 20%, 90%);\n  --input: hsl(199, 20%, 90%);\n  --primary: hsl(180, 51%, 37%);\n  --primary-foreground: hsl(199, 100%, 99%);\n  --primary-light: hsl(185, 84%, 90%);\n  --secondary: hsl(199, 30%, 96%);\n  --secondary-foreground: hsl(199, 9%, 15%);\n  --accent: hsl(14, 100%, 64%);\n  --accent-foreground: hsl(199, 100%, 99%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(60, 9%, 98%);\n  --ring: hsl(180, 51%, 37%);\n  --radius: 0.75rem;\n  --chart-1: hsl(14, 100%, 64%);\n  --chart-2: hsl(214, 100%, 59%);\n  --chart-3: hsl(142, 76%, 36%);\n  --chart-4: hsl(220, 14%, 56%);\n  --chart-5: hsl(52, 98%, 60%);\n}\n\n.dark {\n  --background: hsl(199, 30%, 4%);\n  --foreground: hsl(199, 5%, 90%);\n  --muted: hsl(199, 30%, 8%);\n  --muted-foreground: hsl(199, 5%, 60%);\n  --popover: hsl(199, 30%, 4%);\n  --popover-foreground: hsl(199, 5%, 90%);\n  --card: hsl(199, 30%, 4%);\n  --card-foreground: hsl(199, 5%, 90%);\n  --border: hsl(199, 30%, 18%);\n  --input: hsl(199, 30%, 18%);\n  --primary: hsl(180, 51%, 37%);\n  --primary-foreground: hsl(199, 100%, 99%);\n  --primary-light: hsl(185, 84%, 15%);\n  --secondary: hsl(199, 30%, 8%);\n  --secondary-foreground: hsl(199, 5%, 90%);\n  --accent: hsl(14, 100%, 64%);\n  --accent-foreground: hsl(199, 100%, 99%);\n  --destructive: hsl(0, 62%, 30%);\n  --destructive-foreground: hsl(0, 85%, 97%);\n  --ring: hsl(180, 51%, 37%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n    box-sizing: border-box;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: 'Inter', sans-serif;\n    max-width: 100vw;\n    overflow-x: hidden;\n  }\n}\n\n@layer utilities {\n  .card-hover {\n    @apply transition-all duration-200 ease-in-out hover:scale-[1.02] hover:shadow-lg;\n  }\n\n  .primary-gradient {\n    background: linear-gradient(135deg, hsl(var(--primary-light)) 0%, hsl(var(--primary)) 100%);\n  }\n\n  .animate-float {\n    animation: float 3s ease-in-out infinite;\n  }\n\n  .animate-float:nth-child(odd) {\n    animation-delay: -1.5s;\n  }\n\n  .animate-pulse-slow {\n    animation: pulse 3s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n  }\n\n  .animate-spin-slow {\n    animation: spin 3s linear infinite;\n  }\n}\n\n@keyframes float {\n  0%, 100% { \n    transform: translateY(0px); \n  }\n  50% { \n    transform: translateY(-10px); \n  }\n}\n\n.house-diagram {\n  background: linear-gradient(135deg, hsl(var(--primary-light)) 0%, hsl(185, 84%, 80%) 100%);\n}\n\n.power-bubble {\n  @apply animate-float;\n}\n\n/* Mobile Portrait Optimization - Ultra Compact */\n@media (max-width: 480px) {\n  html, body {\n    max-width: 100vw !important;\n    overflow-x: hidden;\n    overflow-y: hidden;\n    font-size: 11px;\n    height: 100vh !important;\n  }\n  \n  .max-w-md {\n    max-width: 100vw !important;\n    padding-left: 6px !important;\n    padding-right: 6px !important;\n  }\n  \n  .h-screen, .min-h-screen {\n    height: 100vh !important;\n    max-height: 100vh !important;\n    overflow-y: auto !important;\n  }\n  \n  /* Bottom Navigation Mobile Optimization */\n  nav {\n    left: 0 !important;\n    right: 0 !important;\n    width: 100% !important;\n    height: 60px !important;\n  }\n  \n  /* Prevent scrolling by adjusting bottom padding */\n  .pb-20 {\n    padding-bottom: 60px !important;\n  }\n  \n  .pb-16 {\n    padding-bottom: 60px !important;\n  }\n  \n  /* Card spacing adjustments - ultra compact */\n  .space-y-4 > * + *, .space-y-3 > * + *, .space-y-2 > * + * {\n    margin-top: 4px !important;\n  }\n  \n  /* Text size adjustments - smaller */\n  .text-base {\n    font-size: 0.9rem !important;\n  }\n  \n  .text-lg {\n    font-size: 0.95rem !important;\n  }\n  \n  .text-xl {\n    font-size: 1rem !important;\n  }\n  \n  .text-2xl {\n    font-size: 1.1rem !important;\n  }\n  \n  .text-3xl {\n    font-size: 1.2rem !important;\n  }\n  \n  /* Padding adjustments - minimal */\n  .p-2 {\n    padding: 6px !important;\n  }\n  \n  .p-3 {\n    padding: 6px !important;\n  }\n  \n  .p-4 {\n    padding: 8px !important;\n  }\n  \n  .p-6 {\n    padding: 10px !important;\n  }\n  \n  .px-2 {\n    padding-left: 6px !important;\n    padding-right: 6px !important;\n  }\n  \n  .px-3 {\n    padding-left: 6px !important;\n    padding-right: 6px !important;\n  }\n  \n  .px-4 {\n    padding-left: 8px !important;\n    padding-right: 8px !important;\n  }\n  \n  /* Margin adjustments - minimal */\n  .mb-1 {\n    margin-bottom: 2px !important;\n  }\n  \n  .mb-2 {\n    margin-bottom: 3px !important;\n  }\n  \n  .mb-3 {\n    margin-bottom: 4px !important;\n  }\n  \n  .mb-4 {\n    margin-bottom: 6px !important;\n  }\n  \n  .mt-1 {\n    margin-top: 2px !important;\n  }\n  \n  .mt-2 {\n    margin-top: 3px !important;\n  }\n  \n  /* Height adjustments - very compact */\n  .h-32 {\n    height: 6rem !important;\n  }\n  \n  .h-48 {\n    height: 8rem !important;\n  }\n  \n  .h-64 {\n    height: 10rem !important;\n  }\n  \n  /* Logo size - smaller */\n  .h-8 {\n    height: 1.5rem !important;\n  }\n  \n  .h-10 {\n    height: 1.75rem !important;\n  }\n  \n  .h-12 {\n    height: 2rem !important;\n  }\n  \n  /* Ultra compact for specific heights */\n  div[style*=\"height: 180px\"] {\n    height: 120px !important;\n  }\n  \n  div[style*=\"height: 240px\"] {\n    height: 140px !important;\n  }\n  \n  /* Logo size extra small */\n  .h-8 {\n    height: 1.75rem !important;\n  }\n  \n  .h-16 {\n    height: 2.5rem !important;\n  }\n}\n\n.tab-button {\n  @apply transition-all duration-300 ease-in-out;\n  min-width: 60px;\n}\n\n.tab-button.active {\n  @apply text-primary -translate-y-0.5;\n}\n\n@keyframes growUp {\n  from {\n    transform: scaleY(0);\n    opacity: 0;\n  }\n  to {\n    transform: scaleY(1);\n    opacity: 1;\n  }\n}\n\n@keyframes slideUp {\n  from {\n    transform: translateY(20px);\n    opacity: 0;\n  }\n  to {\n    transform: translateY(0);\n    opacity: 1;\n  }\n}\n\n@keyframes bounce {\n  0%, 20%, 50%, 80%, 100% {\n    transform: translateY(0);\n  }\n  40% {\n    transform: translateY(-10px);\n  }\n  60% {\n    transform: translateY(-5px);\n  }\n}\n\n.animate-bounce-slow {\n  animation: bounce 2s infinite;\n}\n\n.tab-button span {\n  font-size: 10px;\n  line-height: 1.2;\n}\n\n.period-btn {\n  @apply transition-all duration-200 ease-in-out;\n}\n\n.period-btn.active {\n  @apply bg-white text-primary shadow-sm;\n}\n\n.period-btn:not(.active) {\n  @apply text-gray-600 hover:text-gray-800;\n}\n\n.progress-bar {\n  @apply transition-all duration-700 ease-in-out;\n}\n\n/* Custom scrollbar */\n::-webkit-scrollbar {\n  width: 6px;\n}\n\n::-webkit-scrollbar-track {\n  background: hsl(var(--muted));\n}\n\n::-webkit-scrollbar-thumb {\n  background: hsl(var(--border));\n  border-radius: 3px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: hsl(var(--primary));\n}\n\n/* Modal backdrop blur */\n.modal-backdrop {\n  backdrop-filter: blur(4px);\n  -webkit-backdrop-filter: blur(4px);\n}\n\n/* Bottom Navigation Mobile Optimizations */\n@media (max-width: 480px) {\n  .tab-button span {\n    font-size: 9px !important;\n    line-height: 1.1 !important;\n  }\n  \n  .tab-button {\n    min-width: 50px !important;\n    padding: 6px 4px !important;\n  }\n}\n\n/* Additional animations for realtime page */\n@keyframes spin-slow {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n.animate-spin-slow {\n  animation: spin-slow 8s linear infinite;\n}\n","size_bytes":7445},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-energy-data.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useState, useEffect } from \"react\";\nimport type { EnergyData, BillingData } from \"@shared/schema\";\n\nconst userId = \"demo-user-1\"; // In a real app, this would come from auth context\n\nexport function useEnergyData() {\n  const { data: latestData } = useQuery<EnergyData>({\n    queryKey: [\"/api/energy/latest\", userId],\n    refetchInterval: 5000, // Refetch every 5 seconds\n  });\n\n  const { data: energyHistory = [] } = useQuery<EnergyData[]>({\n    queryKey: [\"/api/energy/history\", userId],\n  });\n\n  const { data: billingData } = useQuery<BillingData>({\n    queryKey: [\"/api/billing\", userId],\n  });\n\n  return {\n    latestData,\n    energyHistory,\n    billingData,\n  };\n}\n\nexport function useRealtimeData() {\n  const [realtimeData, setRealtimeData] = useState<number[]>([]);\n  const [currentPower, setCurrentPower] = useState(245);\n\n  useEffect(() => {\n    // Initialize with some data\n    const initialData = Array(20).fill(0).map(() => Math.random() * 100 + 200);\n    setRealtimeData(initialData);\n\n    // Try to connect to WebSocket on the specific energy data path\n    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n    const wsUrl = `${protocol}//${window.location.host}/energy-ws`;\n    \n    try {\n      const ws = new WebSocket(wsUrl);\n      \n      ws.onmessage = (event) => {\n        try {\n          const message = JSON.parse(event.data);\n          if (message.type === 'energy-update') {\n            const newPower = message.data.activePower;\n            setCurrentPower(Math.round(newPower));\n            \n            setRealtimeData(prev => {\n              const newData = [...prev];\n              newData.shift();\n              newData.push(newPower);\n              return newData;\n            });\n          }\n        } catch (error) {\n          console.warn('Failed to parse WebSocket message:', error);\n        }\n      };\n\n      ws.onerror = (error) => {\n        console.warn('WebSocket connection failed, falling back to simulation:', error);\n        startSimulation();\n      };\n\n      ws.onopen = () => {\n        console.log('WebSocket connected successfully');\n      };\n\n      ws.onclose = () => {\n        console.log('WebSocket connection closed, falling back to simulation');\n        startSimulation();\n      };\n\n      return () => {\n        ws.close();\n      };\n    } catch (error) {\n      console.warn('WebSocket not available, using simulation');\n      startSimulation();\n    }\n\n    function startSimulation() {\n      const interval = setInterval(() => {\n        const newPower = Math.random() * 100 + 200;\n        setCurrentPower(Math.round(newPower));\n        \n        setRealtimeData(prev => {\n          const newData = [...prev];\n          newData.shift();\n          newData.push(newPower);\n          return newData;\n        });\n      }, 3000);\n\n      return () => clearInterval(interval);\n    }\n  }, []);\n\n  return {\n    realtimeData,\n    currentPower,\n  };\n}\n","size_bytes":2969},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/mock-data.ts":{"content":"export const mockUsageData = {\n  kitchen: 46.8,\n  heating: 31.2,\n  lighting: 20.5,\n  other: 10.8,\n};\n\nexport const mockConsumptionData = {\n  daily: [15, 22, 18, 24, 20, 12, 16],\n  weekly: [52.9, 48, 45, 58, 51, 42, 47],\n  monthly: [180, 165, 195, 210, 189, 156, 173, 201, 187, 176, 192, 168],\n  yearly: [2100, 1980, 2250, 2180, 2050, 2340, 2280],\n};\n\nexport const mockBillingHistory = [65, 75, 45, 35, 80, 70];\nexport const mockBillingLabels = [\"Jun/Jul\", \"Aug/Sep\", \"Oct/Nov\", \"Dec/Jan\", \"Feb/Mar\", \"Apr/May\"];\n\nexport const getDailyLabels = () => [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"];\nexport const getWeeklyLabels = () => [\"W1\", \"W2\", \"W3\", \"W4\", \"W5\", \"W6\", \"W7\"];\nexport const getMonthlyLabels = () => [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\nexport const getYearlyLabels = () => [\"2018\", \"2019\", \"2020\", \"2021\", \"2022\", \"2023\", \"2024\"];\n\nexport const getCurrentDate = () => {\n  const today = new Date();\n  return today.toLocaleDateString(\"en-US\", { \n    weekday: \"long\", \n    year: \"numeric\", \n    month: \"long\", \n    day: \"numeric\" \n  });\n};\n\nexport const formatTimeAgo = (hoursAgo: number) => {\n  if (hoursAgo < 1) return \"Just now\";\n  if (hoursAgo < 24) return `${Math.floor(hoursAgo)} hours ago`;\n  return `${Math.floor(hoursAgo / 24)} days ago`;\n};\n","size_bytes":1317},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/economics.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport BillingChart from \"@/components/charts/billing-chart\";\nimport { useEnergyData } from \"@/hooks/use-energy-data\";\nimport { mockBillingHistory, mockBillingLabels } from \"@/lib/mock-data\";\nimport { FileText, Zap, Star, History, Leaf } from \"lucide-react\";\nimport type { BillingData } from \"@shared/schema\";\nimport logoImage from \"@assets/e snapp logo 1 (1)_1754149374420.png\";\n\nexport default function EconomicsPage() {\n  const { billingData } = useEnergyData();\n\n  return (\n    <div className=\"max-w-md mx-auto px-4 space-y-4 pb-20\">\n      {/* Logo Section */}\n      <div className=\"flex justify-center mb-4\">\n        <img \n          src={logoImage} \n          alt=\"e-snapp\" \n          className=\"h-12 w-auto\"\n        />\n      </div>\n\n      {/* Header */}\n      <h1 className=\"text-2xl font-bold text-gray-800\">Billing Summary</h1>\n\n      {/* Current Bill Card */}\n      <Card className=\"card-hover bg-gradient-to-br from-blue-50 to-cyan-50\">\n        <CardContent className=\"p-4\">\n          <div className=\"grid grid-cols-2 gap-4 mb-4\">\n            <div className=\"text-center\">\n              <div className=\"flex items-center justify-center mb-2\">\n                <FileText className=\"h-5 w-5 text-primary mr-2\" />\n                <span className=\"text-sm font-medium text-gray-700\">Current Bill</span>\n              </div>\n              <p className=\"text-2xl font-bold text-gray-800\">\n                €{billingData?.currentBill || \"57.00\"}\n              </p>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"flex items-center justify-center mb-2\">\n                <Zap className=\"h-5 w-5 text-primary mr-2\" />\n                <span className=\"text-sm font-medium text-gray-700\">Energy Used</span>\n              </div>\n              <p className=\"text-2xl font-bold text-gray-800\">\n                {billingData?.energyUsed || \"129.5\"} kWh\n              </p>\n            </div>\n          </div>\n          <div className=\"border-t border-primary/20 pt-3 space-y-1\">\n            <div className=\"flex justify-between text-sm\">\n              <span className=\"text-gray-600\">Contract:</span>\n              <span className=\"font-medium\">{billingData?.contract || \"Bioraria (F1/F23)\"}</span>\n            </div>\n            <div className=\"flex justify-between text-sm\">\n              <span className=\"text-gray-600\">Period:</span>\n              <span className=\"font-medium\">{billingData?.period || \"01 Jul - 31 Aug 2025\"}</span>\n            </div>\n            <div className=\"flex justify-between text-sm\">\n              <span className=\"text-gray-600\">Est. Final Bill:</span>\n              <span className=\"font-bold\">€{billingData?.estimatedFinalBill || \"83.40\"}</span>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Better Tariffs Available */}\n      <div className=\"space-y-4\">\n        <h3 className=\"font-semibold text-gray-800 flex items-center gap-2\">\n          <Star className=\"h-5 w-5 text-accent\" />\n          Scopri le Offerte Migliori\n        </h3>\n        \n        {/* Savings Card */}\n        <Card className=\"card-hover bg-primary text-white\">\n          <CardContent className=\"p-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"text-center\">\n                <p className=\"text-sm opacity-90 mb-1\">Costo Annuale</p>\n                <p className=\"text-2xl font-bold\">€920.47</p>\n                <p className=\"text-xs opacity-80\">Basato sulla tue bollette</p>\n              </div>\n              <div className=\"text-center\">\n                <p className=\"text-sm opacity-90 mb-1\">Risparmio Stimato</p>\n                <p className=\"text-2xl font-bold\">€120.00 <span className=\"text-sm\">/ anno</span></p>\n                <p className=\"text-xs opacity-80\">Stima migliore offerta</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        {/* Better Offers Button */}\n        <Button \n          className=\"w-full bg-primary hover:bg-primary/90 text-white font-semibold py-3\"\n          onClick={() => (window as any).showTariffPlans?.()}\n        >\n          Scegli le offerte migliori\n        </Button>\n      </div>\n\n      {/* Available Plans */}\n      <div className=\"space-y-4\">\n        <Card className=\"card-hover\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between mb-3\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-10 h-10 bg-green-100 rounded-full flex items-center justify-center\">\n                  <Leaf className=\"h-5 w-5 text-green-600\" />\n                </div>\n                <div>\n                  <h4 className=\"font-semibold text-gray-800\">Green Energy Plan</h4>\n                  <p className=\"text-xs text-gray-500\">12 months</p>\n                </div>\n              </div>\n            </div>\n            <div className=\"space-y-2 text-sm\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-600\">Type</span>\n                <span className=\"font-medium\">Monoraria (Fixed)</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-600\">If You Used This</span>\n                <span className=\"font-medium\">€48.20</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-600\">Savings</span>\n                <span className=\"font-bold text-green-600\">€8.80</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card className=\"card-hover\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between mb-3\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center\">\n                  <Zap className=\"h-5 w-5 text-blue-600\" />\n                </div>\n                <div>\n                  <h4 className=\"font-semibold text-gray-800\">Enel Flex Control</h4>\n                  <p className=\"text-xs text-gray-500\">12 months</p>\n                </div>\n              </div>\n            </div>\n            <div className=\"space-y-2 text-sm\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-600\">Type</span>\n                <span className=\"font-medium\">Monoraria (Fixed)</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-600\">If You Used This</span>\n                <span className=\"font-medium\">€48.20</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-600\">Savings</span>\n                <span className=\"font-bold text-green-600\">€8.80</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Show More Button */}\n      <Button \n        variant=\"outline\" \n        className=\"w-full border-primary text-primary hover:bg-primary hover:text-white\"\n        onClick={() => (window as any).showTariffPlans?.()}\n      >\n        Show more\n      </Button>\n\n      {/* Billing History */}\n      <Card className=\"card-hover\">\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h3 className=\"font-semibold text-gray-800 flex items-center gap-2\">\n              <History className=\"h-5 w-5 text-primary\" />\n              Billing History\n            </h3>\n            <Badge className=\"bg-green-100 text-green-800\">\n              ↑ +3%\n            </Badge>\n          </div>\n          <div className=\"flex items-center justify-between mb-4\">\n            <div>\n              <p className=\"text-2xl font-bold text-gray-800\">62€</p>\n              <p className=\"text-sm text-gray-600\">estimated final bill 80€</p>\n            </div>\n          </div>\n          <div className=\"h-32\">\n            <BillingChart \n              data={mockBillingHistory}\n              labels={mockBillingLabels}\n            />\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":8402},"client/src/pages/home.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport UsageChart from \"@/components/charts/usage-chart\";\nimport { useEnergyData } from \"@/hooks/use-energy-data\";\nimport { mockUsageData } from \"@/lib/mock-data\";\nimport { Zap, Home, Lightbulb, Leaf, TrendingUp, RotateCcw, Activity, ChevronRight, Clock, Euro, Menu } from \"lucide-react\";\nimport type { BillingData } from \"@shared/schema\";\nimport logoImage from \"@assets/e snapp logo 1 (1)_1754149374420.png\";\n\nexport default function HomePage() {\n  const { billingData } = useEnergyData();\n  const [isVisible, setIsVisible] = useState(false);\n  const [pulseKey, setPulseKey] = useState(0);\n  \n  const progressPercentage = billingData && billingData.energyUsed ? \n    (parseFloat(billingData.energyUsed) / 383) * 100 : 28;\n\n  useEffect(() => {\n    setIsVisible(true);\n    // Pulse effect for energy data updates\n    const interval = setInterval(() => {\n      setPulseKey(prev => prev + 1);\n    }, 3000);\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <div className=\"max-w-md mx-auto px-2 space-y-2 pb-16 min-h-screen\">\n      {/* Logo Section */}\n      <div className={`flex justify-center mb-1 pt-1 transition-all duration-1000 ${isVisible ? 'opacity-100 scale-100' : 'opacity-0 scale-95'}`}>\n        <img \n          src={logoImage} \n          alt=\"e-snapp\" \n          className=\"h-8 w-auto filter drop-shadow-md hover:scale-110 transition-transform\"\n        />\n      </div>\n\n      {/* Greeting Section */}\n      <div className={`mb-2 transition-all duration-700 delay-200 ${isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-4'}`}>\n        <h1 className=\"text-base font-bold text-gray-800\">Hello, Inayat</h1>\n        <p className=\"text-gray-600 text-sm\">Today is Tuesday, 22 July</p>\n        <div className=\"mt-1.5 flex items-center space-x-2\">\n          <Badge className={`bg-primary text-white text-xs animate-pulse`} key={pulseKey}>\n            <Activity className=\"h-3 w-3 mr-1\" />\n            1 kWh\n          </Badge>\n          <span className=\"text-xs text-gray-600\">EUR</span>\n        </div>\n      </div>\n\n      {/* Current Billing Cycle Card */}\n      <Card className={`card-hover bg-gradient-to-br from-blue-50 to-cyan-50 border-blue-100 transition-all duration-700 delay-300 hover:scale-105 hover:shadow-xl ${isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-4'}`}>\n        <CardContent className=\"p-2\">\n          <div className=\"flex items-center justify-between mb-1\">\n            <h3 className=\"font-semibold text-gray-800 flex items-center gap-1 text-xs\">\n              <RotateCcw className=\"h-3 w-3 text-primary animate-spin-slow\" />\n              Current Billing Cycle\n            </h3>\n            <ChevronRight className=\"h-3 w-3 text-gray-400 hover:text-primary transition-colors\" />\n          </div>\n          <div className=\"text-xs text-gray-600 mb-2 space-y-0.5\">\n            <p>{billingData?.period || \"01 Jul - 31 Aug 2025\"}</p>\n            <p>45 Days Remaining</p>\n          </div>\n          <div className=\"flex justify-between items-center mb-1\">\n            <div className=\"bg-primary text-white px-1.5 py-0.5 rounded text-xs font-medium text-center\">\n              <div>{billingData?.energyUsed || \"109\"} kWh</div>\n              <div className=\"text-xs opacity-90\">Current</div>\n            </div>\n            <div className=\"bg-gray-400 text-white px-2 py-1 rounded text-xs font-medium text-center\">\n              <div>383 kWh</div>\n              <div className=\"text-xs opacity-90\">Limit</div>\n            </div>\n          </div>\n          <Progress value={progressPercentage} className=\"h-2\" />\n        </CardContent>\n      </Card>\n\n      {/* Home Performance Card */}\n      <Card className={`card-hover transition-all duration-700 delay-400 hover:scale-105 hover:shadow-xl ${isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-4'}`}>\n        <CardContent className=\"p-2\">\n          <div className=\"flex items-center justify-between mb-1\">\n            <h3 className=\"font-semibold text-gray-800 flex items-center gap-1 text-xs\">\n              <Home className=\"h-3 w-3 text-primary\" />\n              Home Performance\n            </h3>\n            <div className=\"flex items-center space-x-1\">\n              <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800 animate-bounce text-xs px-1\">\n                + 15%\n              </Badge>\n              <ChevronRight className=\"h-3 w-3 text-gray-400 hover:text-primary transition-colors\" />\n            </div>\n          </div>\n          <p className=\"text-xs text-gray-600 mb-2\">\n            64% Better than similar homes.\n          </p>\n          <div className=\"flex justify-between items-end\">\n            <div className=\"text-center\">\n              <div className=\"w-12 h-16 bg-gray-400 rounded-t-lg mb-1 relative overflow-hidden\">\n                <div className=\"absolute bottom-0 w-full bg-gray-500 rounded-t-lg h-3/5\"></div>\n              </div>\n              <p className=\"text-xs text-gray-600\">Average</p>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"w-12 h-20 bg-accent rounded-t-lg mb-1 relative overflow-hidden flex items-center justify-center\">\n                <Home className=\"h-4 w-4 text-white\" />\n              </div>\n              <p className=\"text-xs font-semibold text-accent\">Yours</p>\n              <p className=\"text-sm font-bold text-gray-800\">\n                €{billingData?.currentBill || \"57.00\"}\n              </p>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"w-12 h-14 bg-gray-400 rounded-t-lg mb-1 relative overflow-hidden\">\n                <div className=\"absolute bottom-0 w-full bg-gray-500 rounded-t-lg h-2/5\"></div>\n              </div>\n              <p className=\"text-xs text-gray-600\">Efficient</p>\n              <p className=\"text-xs text-gray-800\">€47.00</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* CO2 Emissions Card */}\n      <Card className=\"card-hover bg-primary text-white\">\n        <CardContent className=\"p-2\">\n          <h3 className=\"font-semibold mb-2 flex items-center gap-1 text-xs\">\n            <Leaf className=\"h-3 w-3\" />\n            CO₂ Emissions & Savings\n          </h3>\n          <div className=\"flex justify-between\">\n            <div className=\"text-center\">\n              <p className=\"text-lg font-bold\">\n                {billingData?.co2Emitted || \"42.7\"} kg\n              </p>\n              <p className=\"text-xs opacity-90\">CO₂ Emitted</p>\n            </div>\n            <div className=\"w-px bg-white opacity-30\"></div>\n            <div className=\"text-center\">\n              <p className=\"text-lg font-bold\">\n                {billingData?.co2Avoided || \"12.1\"} kg\n              </p>\n              <p className=\"text-xs opacity-90\">CO₂ Avoided</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Energy Usage by Category */}\n      <Card className=\"card-hover\">\n        <CardContent className=\"p-2\">\n          <h3 className=\"font-semibold text-gray-800 mb-2 flex items-center gap-1 text-xs\">\n            <Zap className=\"h-3 w-3 text-primary\" />\n            Energy Usage by Category\n          </h3>\n          <div className=\"flex items-center justify-center mb-2\">\n            <div className=\"relative w-24 h-24\">\n              <UsageChart data={mockUsageData} />\n              <div className=\"absolute inset-0 flex items-center justify-center\">\n                <div className=\"text-center\">\n                  <p className=\"text-sm font-bold text-gray-800\">109kWh</p>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"space-y-1\">\n            {[\n              { label: \"Kitchen\", value: \"46.8 kWh\", color: \"bg-chart-1\" },\n              { label: \"Heating\", value: \"31.2 kWh\", color: \"bg-chart-2\" },\n              { label: \"Lighting\", value: \"20.5 kWh\", color: \"bg-chart-3\" },\n              { label: \"Other\", value: \"10.8 kWh\", color: \"bg-chart-4\" },\n            ].map(({ label, value, color }) => (\n              <div key={label} className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-1\">\n                  <div className={`w-2 h-2 rounded-full ${color}`}></div>\n                  <span className=\"text-xs\">{label}</span>\n                </div>\n                <span className=\"text-xs font-semibold\">{value}</span>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Smart Suggestions Card */}\n      <Card className=\"card-hover bg-green-100 border-green-200\">\n        <CardContent className=\"p-2\">\n          <div className=\"flex items-center justify-between mb-1\">\n            <h3 className=\"font-semibold text-gray-800 flex items-center gap-1 text-xs\">\n              <Lightbulb className=\"h-3 w-3 text-green-600\" />\n              Smart Suggestions\n            </h3>\n          </div>\n          <p className=\"text-xs text-gray-700 mb-2\">\n            Tip: \"Try reducing dryer use during peak hours.\"\n          </p>\n          <Button variant=\"ghost\" className=\"text-green-700 hover:text-green-800 p-0 h-auto text-xs\">\n            See All Tips\n          </Button>\n        </CardContent>\n      </Card>\n\n      {/* Bottom Navigation Bar */}\n      <div className=\"fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 max-w-md mx-auto\">\n        <div className=\"flex items-center justify-around py-2\">\n          <button className=\"flex flex-col items-center p-2 text-gray-600 hover:text-primary transition-colors\">\n            <Home className=\"h-5 w-5\" />\n            <span className=\"text-xs mt-1\">Home</span>\n          </button>\n          \n          <button className=\"flex flex-col items-center p-2 text-gray-400 hover:text-primary transition-colors\">\n            <TrendingUp className=\"h-5 w-5\" />\n            <span className=\"text-xs mt-1\">Trend</span>\n          </button>\n          \n          <button className=\"flex flex-col items-center p-2 text-gray-400 hover:text-primary transition-colors\">\n            <Clock className=\"h-5 w-5\" />\n            <span className=\"text-xs mt-1\">Realtime</span>\n          </button>\n          \n          <button className=\"flex flex-col items-center p-2 text-gray-400 hover:text-primary transition-colors\">\n            <Euro className=\"h-5 w-5\" />\n            <span className=\"text-xs mt-1\">Economics</span>\n          </button>\n          \n          <button className=\"flex flex-col items-center p-2 text-gray-400 hover:text-primary transition-colors\">\n            <Menu className=\"h-5 w-5\" />\n            <span className=\"text-xs mt-1\">Menu</span>\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10962},"client/src/pages/menu.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { User, Bell, Headphones, Settings, Info, LogOut, Trash2, ChevronRight } from \"lucide-react\";\nimport type { User as UserType } from \"@shared/schema\";\nimport logoImage from \"@assets/e snapp logo 1 (1)_1754149374420.png\";\n\nconst userId = \"demo-user-1\"; // In a real app, this would come from auth context\n\nexport default function MenuPage() {\n  const { data: user } = useQuery<UserType>({\n    queryKey: [\"/api/user\", userId],\n  });\n\n  const handleShowNotificationSettings = () => {\n    if ((window as any).showNotificationSettings) {\n      (window as any).showNotificationSettings();\n    }\n  };\n\n  const handleShowContactSupport = () => {\n    if ((window as any).showContactSupport) {\n      (window as any).showContactSupport();\n    }\n  };\n\n  const handleDeleteAccount = () => {\n    if (confirm(\"Are you sure you want to delete your account? This action cannot be undone.\")) {\n      alert(\"Account deletion functionality would be implemented here\");\n    }\n  };\n\n  const handleLogout = () => {\n    if (confirm(\"Are you sure you want to logout?\")) {\n      // Clear all localStorage data\n      localStorage.clear();\n      // Redirect to login page\n      window.location.href = '/login';\n    }\n  };\n\n  const handleSettings = () => {\n    window.location.href = '/settings';\n  };\n\n  const handleAbout = () => {\n    alert(\"About functionality would be implemented here\");\n  };\n\n  return (\n    <div className=\"max-w-md mx-auto px-4 space-y-4 pb-20\">\n      {/* Logo Section */}\n      <div className=\"flex justify-center mb-4\">\n        <img \n          src={logoImage} \n          alt=\"e-snapp\" \n          className=\"h-12 w-auto\"\n        />\n      </div>\n\n      {/* Header */}\n      <h1 className=\"text-2xl font-bold text-gray-800\">My Profile</h1>\n\n      {/* Profile Card */}\n      <Card className=\"card-hover bg-gradient-to-br from-blue-50 to-cyan-50 cursor-pointer\">\n        <CardContent className=\"p-4\" onClick={() => (window as any).showProfile?.()}>\n          <div className=\"flex items-center gap-4\">\n            <div className=\"w-12 h-12 bg-primary rounded-full flex items-center justify-center\">\n              <User className=\"h-6 w-6 text-white\" />\n            </div>\n            <div className=\"flex-1\">\n              <h3 className=\"font-semibold text-gray-800\">\n                {user?.name || \"Inayat Ali\"}\n              </h3>\n              <p className=\"text-sm text-gray-600\">\n                {user?.email || \"inayatalikatif@gmail.com\"}\n              </p>\n            </div>\n            <div className=\"text-gray-400\">\n              <ChevronRight className=\"h-5 w-5\" />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Menu Options */}\n      <div className=\"space-y-4\">\n        <Card className=\"card-hover\">\n          <CardContent className=\"p-0\">\n            <Button\n              variant=\"ghost\"\n              className=\"w-full justify-start p-4 h-auto\"\n              onClick={handleShowNotificationSettings}\n            >\n              <Bell className=\"h-5 w-5 text-primary mr-3\" />\n              <span className=\"font-medium text-gray-800\">Notification Settings</span>\n              <div className=\"ml-auto\">\n                <ChevronRight className=\"h-4 w-4 text-gray-400\" />\n              </div>\n            </Button>\n          </CardContent>\n        </Card>\n        \n        <Card className=\"card-hover\">\n          <CardContent className=\"p-0\">\n            <Button\n              variant=\"ghost\"\n              className=\"w-full justify-start p-4 h-auto\"\n              onClick={handleShowContactSupport}\n            >\n              <Headphones className=\"h-5 w-5 text-primary mr-3\" />\n              <span className=\"font-medium text-gray-800\">Contact Support</span>\n              <div className=\"ml-auto\">\n                <ChevronRight className=\"h-4 w-4 text-gray-400\" />\n              </div>\n            </Button>\n          </CardContent>\n        </Card>\n        \n        <Card className=\"card-hover\">\n          <CardContent className=\"p-0\">\n            <Button\n              variant=\"ghost\"\n              className=\"w-full justify-start p-4 h-auto\"\n              onClick={handleSettings}\n            >\n              <Settings className=\"h-5 w-5 text-primary mr-3\" />\n              <span className=\"font-medium text-gray-800\">Settings</span>\n              <div className=\"ml-auto\">\n                <ChevronRight className=\"h-4 w-4 text-gray-400\" />\n              </div>\n            </Button>\n          </CardContent>\n        </Card>\n        \n        <Card className=\"card-hover\">\n          <CardContent className=\"p-0\">\n            <Button\n              variant=\"ghost\"\n              className=\"w-full justify-start p-4 h-auto\"\n              onClick={handleAbout}\n            >\n              <Info className=\"h-5 w-5 text-primary mr-3\" />\n              <span className=\"font-medium text-gray-800\">About</span>\n              <div className=\"ml-auto\">\n                <ChevronRight className=\"h-4 w-4 text-gray-400\" />\n              </div>\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Danger Zone */}\n      <div className=\"space-y-3\">\n        <Button\n          variant=\"outline\"\n          className=\"w-full font-semibold py-3 border-gray-300 text-gray-700 hover:bg-gray-100\"\n          onClick={handleDeleteAccount}\n        >\n          <Trash2 className=\"h-4 w-4 mr-2\" />\n          Delete Account\n        </Button>\n        \n        <Button\n          className=\"w-full bg-red-500 hover:bg-red-600 text-white font-semibold py-3\"\n          onClick={handleLogout}\n        >\n          <LogOut className=\"h-4 w-4 mr-2\" />\n          Logout\n        </Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5824},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/realtime.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { useRealtimeData } from \"@/hooks/use-energy-data\";\nimport { Zap, Activity, Sun, Car, Battery, Plug, Bell, Plus } from \"lucide-react\";\nimport logoImage from \"@assets/e snapp logo 1 (1)_1754149374420.png\";\nimport houseVideo from \"@assets/Administrator_ animation - rumah - Windows, Mac, Linux - Unity 6DX11_ 2025-07-27 13-37-39 (online-video-cutter.com)_1754152375569.mp4\";\n\nexport default function RealtimePage() {\n  const { realtimeData, currentPower } = useRealtimeData();\n  const [isVisible, setIsVisible] = useState(false);\n\n  useEffect(() => {\n    setIsVisible(true);\n  }, []);\n\n  return (\n    <div className=\"max-w-md mx-auto px-2 space-y-1 pb-16 min-h-screen\">\n      {/* Header with Logo and Actions */}\n      <div className={`flex items-center justify-between mb-1 pt-1 transition-all duration-700 ${isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-4'}`}>\n        <img \n          src={logoImage} \n          alt=\"e-snapp\" \n          className=\"h-7 w-auto\"\n        />\n        <div className=\"flex items-center space-x-3\">\n          <Bell className=\"h-6 w-6 text-gray-600 hover:text-primary transition-colors cursor-pointer\" />\n          <div className=\"w-8 h-8 bg-gray-200 rounded-full flex items-center justify-center hover:bg-gray-300 transition-colors cursor-pointer\">\n            <Plus className=\"h-5 w-5 text-gray-600\" />\n          </div>\n        </div>\n      </div>\n\n      {/* Live Power Usage Title */}\n      <h1 className={`text-base font-bold text-gray-800 mb-1 transition-all duration-700 delay-200 ${isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-4'}`}>\n        Live Power Usage\n      </h1>\n\n      {/* House Video Card */}\n      <Card className={`relative overflow-hidden bg-gradient-to-br from-blue-50 to-cyan-50 transition-all duration-700 delay-300 hover:scale-105 hover:shadow-xl ${isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-4'}`} style={{ height: \"180px\" }}>\n        <CardContent className=\"p-0 h-full\">\n          <div className=\"relative h-full rounded-lg overflow-hidden\">\n            {/* Video Background - Clean, no overlays */}\n            <video \n              src={houseVideo}\n              autoPlay \n              loop \n              muted \n              className=\"w-full h-full object-cover\"\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Live Usage Card */}\n      <Card className={`bg-gradient-to-br from-green-50 to-emerald-50 border-green-100 transition-all duration-700 delay-400 hover:scale-105 hover:shadow-xl ${isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-4'}`}>\n        <CardContent className=\"p-2\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <h3 className=\"font-semibold text-gray-800 text-sm flex items-center gap-1\">\n              <Zap className=\"h-4 w-4 text-primary animate-pulse\" />\n              Live Usage\n            </h3>\n          </div>\n          \n          <div className=\"text-center mb-2\">\n            <div className=\"text-xl font-bold text-gray-800 animate-pulse\" key={currentPower}>\n              {currentPower || \"245\"} W\n            </div>\n            <p className=\"text-xs text-gray-600\">Updated just now</p>\n          </div>\n          \n          {/* Animated Wave Chart */}\n          <div className=\"h-12 bg-white/50 rounded-lg flex items-end justify-center overflow-hidden relative\">\n            <svg viewBox=\"0 0 400 80\" className=\"w-full h-full\">\n              <path\n                d=\"M0,40 Q50,20 100,40 T200,40 T300,40 T400,40\"\n                stroke=\"#10b981\"\n                strokeWidth=\"3\"\n                fill=\"none\"\n                className=\"animate-pulse\"\n              />\n              <circle\n                cx=\"350\"\n                cy=\"30\"\n                r=\"4\"\n                fill=\"#10b981\"\n                className=\"animate-bounce\"\n              />\n            </svg>\n            <div className=\"absolute top-2 right-2 w-2 h-2 bg-green-500 rounded-full animate-ping\"></div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Realtime Data Section */}\n      <div className={`transition-all duration-700 delay-500 ${isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-4'}`}>\n        <h2 className=\"text-sm font-bold text-gray-800 mb-2\">Realtime Data</h2>\n        \n        {/* Real-time Data Grid */}\n        <div className=\"grid grid-cols-2 gap-2\">\n          <Card className=\"bg-white hover:scale-105 hover:shadow-xl transition-all duration-300\">\n            <CardContent className=\"p-2 text-center\">\n              <p className=\"text-xs text-gray-600 mb-0.5\">Active Power</p>\n              <p className=\"text-lg font-bold text-gray-800 animate-pulse\" key={currentPower}>\n                {currentPower || \"245\"} W\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-white hover:scale-105 hover:shadow-xl transition-all duration-300\">\n            <CardContent className=\"p-2 text-center\">\n              <p className=\"text-xs text-gray-600 mb-0.5\">Reactive Power</p>\n              <p className=\"text-lg font-bold text-gray-800\">246 VAR</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-white hover:scale-105 hover:shadow-xl transition-all duration-300\">\n            <CardContent className=\"p-2 text-center\">\n              <p className=\"text-xs text-gray-600 mb-0.5\">Voltage</p>\n              <p className=\"text-lg font-bold text-gray-800\">220 V</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-white hover:scale-105 hover:shadow-xl transition-all duration-300\">\n            <CardContent className=\"p-2 text-center\">\n              <p className=\"text-xs text-gray-600 mb-0.5\">Power Factor</p>\n              <p className=\"text-lg font-bold text-gray-800\">0.92</p>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":6014},"client/src/pages/trends.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { TrendingUp, Leaf, BarChart3 } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport logoImage from \"@assets/e snapp logo 1 (1)_1754149374420.png\";\n\ntype Period = \"day\" | \"week\" | \"month\" | \"year\" | \"billing\";\n\nexport default function TrendsPage() {\n  const [selectedPeriod, setSelectedPeriod] = useState<Period>(\"day\");\n  const [isVisible, setIsVisible] = useState(false);\n\n  useEffect(() => {\n    setIsVisible(true);\n  }, []);\n\n  // Fetch real energy data from API\n  const { data: energyData, isLoading } = useQuery<any[]>({\n    queryKey: ['/api/energy/history/demo-user-1'],\n  });\n\n  const getChartData = () => {\n    // Always use visible demo data for better UX\n    return { \n      data: [14.2, 22.1, 18.7, 25.3, 20.8, 12.4, 16.9], \n      labels: [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"] \n    };\n  };\n\n  const getCurrentConsumption = () => {\n    const data = getChartData().data;\n    const highlightIndex = 3; // Thursday\n    return data[highlightIndex] || 14.7;\n  };\n\n  const getCurrentDateLabel = () => {\n    return \"Thu, 23 Jul\";\n  };\n\n  const chartData = getChartData();\n\n  return (\n    <div className=\"max-w-md mx-auto px-2 space-y-2 pb-16 min-h-screen\">\n      {/* Logo Section */}\n      <div className=\"flex justify-center mb-1 pt-1\">\n        <img \n          src={logoImage} \n          alt=\"e-snapp\" \n          className=\"h-8 w-auto\"\n        />\n      </div>\n\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-1\">\n        <h1 className=\"text-lg font-bold text-gray-800\">Energy Consumption</h1>\n        <div className=\"flex items-center space-x-1\">\n          <span className=\"bg-primary text-white px-1.5 py-0.5 rounded-full text-xs font-medium\">1 kWh</span>\n          <span className=\"text-xs text-gray-600\">EUR</span>\n        </div>\n      </div>\n\n      {/* Time Period Selector */}\n      <Card className=\"bg-white shadow-sm\">\n        <CardContent className=\"p-1.5\">\n          <div className=\"flex space-x-0.5 overflow-x-auto bg-gray-100 rounded-full p-0.5\">\n            {[\n              { id: \"day\", label: \"Day\" },\n              { id: \"week\", label: \"Week\" },\n              { id: \"month\", label: \"Month\" },\n              { id: \"year\", label: \"Year\" },\n              { id: \"billing\", label: \"Billing Cycle\" },\n            ].map(({ id, label }) => (\n              <Button\n                key={id}\n                variant=\"ghost\"\n                size=\"sm\"\n                className={`whitespace-nowrap rounded-full transition-all duration-200 ${\n                  selectedPeriod === id \n                    ? \"bg-white text-gray-800 shadow-sm font-medium\" \n                    : \"text-gray-600 hover:text-gray-800\"\n                }`}\n                onClick={() => setSelectedPeriod(id as Period)}\n              >\n                {label}\n              </Button>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Main Chart Card - Ultra Mobile Optimized */}\n      <Card className={`bg-white shadow-lg transition-all duration-700 delay-300 ${isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-4'}`}>\n        <CardContent className=\"p-2\">\n          {/* Chart Header */}\n          <div className=\"text-center mb-2\">\n            <p className=\"text-xs text-gray-500 mb-0.5\">{getCurrentDateLabel()}</p>\n            <p className=\"text-lg font-bold text-gray-800\">\n              {getCurrentConsumption().toFixed(1)} kWh\n            </p>\n          </div>\n          \n          {/* Chart with Y-axis labels */}\n          <div className=\"flex\">\n            {/* Y-axis labels */}\n            <div className=\"flex flex-col justify-between h-32 text-xs text-gray-400 pr-1.5 py-0.5\">\n              <span>25</span>\n              <span>20</span>\n              <span>15</span>\n              <span>10</span>\n              <span>5</span>\n            </div>\n            \n            {/* Chart area */}\n            <div className=\"flex-1 h-32 relative border-l border-gray-200\">\n              {isLoading ? (\n                <div className=\"flex items-center justify-center h-full\">\n                  <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n                </div>\n              ) : (\n                <div className=\"flex items-end justify-center space-x-1.5 h-full px-2\">\n                  {chartData.data.map((value, index) => {\n                    const isHighlighted = index === 3; // Thursday\n                    const heightPx = Math.max((value / 25) * 100, 12); // Scale to ultra small for mobile\n                    \n                    return (\n                      <div \n                        key={index} \n                        className=\"flex flex-col items-center space-y-2 group cursor-pointer\"\n                        style={{ \n                          animationDelay: `${index * 100}ms`,\n                          animation: `slideUp 0.8s ease-out forwards`\n                        }}\n                      >\n                        <div \n                          className={`w-5 rounded-t-lg transition-all duration-500 transform group-hover:scale-110 group-hover:shadow-xl ${\n                            isHighlighted \n                              ? 'bg-gradient-to-t from-teal-700 to-teal-500 shadow-lg animate-pulse' \n                              : 'bg-gradient-to-t from-sky-500 to-sky-300 group-hover:from-sky-600 group-hover:to-sky-400'\n                          }`}\n                          style={{ \n                            height: `${heightPx}px`,\n                            minHeight: '12px',\n                            animationDelay: `${index * 150}ms`,\n                            animation: `growUp 1s ease-out ${index * 150}ms forwards`,\n                            transform: `scaleY(0)`,\n                            transformOrigin: 'bottom'\n                          }}\n                        />\n                        <span className={`text-xs font-medium transition-colors duration-300 ${\n                          isHighlighted ? 'text-teal-600 font-semibold' : 'text-gray-600 group-hover:text-gray-800'\n                        }`}>\n                          {chartData.labels[index]}\n                        </span>\n                        \n                        {/* Hover tooltip */}\n                        <div className=\"absolute -top-6 bg-gray-800 text-white text-xs px-1 py-0.5 rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none z-10\">\n                          {value.toFixed(1)}\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              )}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* CO2 Emissions & Savings */}\n      <Card className=\"card-hover bg-primary text-white\">\n        <CardContent className=\"p-4\">\n          <h3 className=\"font-semibold mb-4 flex items-center gap-2\">\n            <Leaf className=\"h-5 w-5\" />\n            CO₂ Emissions & Savings\n          </h3>\n          <div className=\"flex justify-between\">\n            <div className=\"text-center\">\n              <p className=\"text-2xl font-bold\">42.7 kg</p>\n              <p className=\"text-sm opacity-90\">CO₂ Emitted</p>\n            </div>\n            <div className=\"w-px bg-white opacity-30\"></div>\n            <div className=\"text-center\">\n              <p className=\"text-2xl font-bold\">12.1 kg</p>\n              <p className=\"text-sm opacity-90\">CO₂ Avoided</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Compared to Previous */}\n      <div className=\"space-y-4\">\n        <h3 className=\"font-semibold text-gray-800 flex items-center gap-2\">\n          <BarChart3 className=\"h-5 w-5 text-primary\" />\n          Compared to Previous\n        </h3>\n        <div className=\"grid grid-cols-3 gap-3\">\n          <Card className=\"card-hover bg-gradient-to-br from-blue-50 to-cyan-50\">\n            <CardContent className=\"p-3 text-center\">\n              <p className=\"text-sm text-gray-600 mb-1\">Energy Used</p>\n              <p className=\"text-lg font-bold text-gray-800\">42.7 kWh</p>\n              <p className=\"text-xs text-green-600 font-medium\">↑ +6%</p>\n            </CardContent>\n          </Card>\n          <Card className=\"card-hover bg-gradient-to-br from-blue-50 to-cyan-50\">\n            <CardContent className=\"p-3 text-center\">\n              <p className=\"text-sm text-gray-600 mb-1\">Cost</p>\n              <p className=\"text-lg font-bold text-gray-800\">€42.7</p>\n              <p className=\"text-xs text-red-600 font-medium\">↓ -3.4%</p>\n            </CardContent>\n          </Card>\n          <Card className=\"card-hover bg-gradient-to-br from-blue-50 to-cyan-50\">\n            <CardContent className=\"p-3 text-center\">\n              <p className=\"text-sm text-gray-600 mb-1\">CO₂</p>\n              <p className=\"text-lg font-bold text-gray-800\">42.7 kg</p>\n              <p className=\"text-xs text-green-600 font-medium\">↑ +4%</p>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      {/* Monthly Comparison */}\n      <Card className=\"card-hover\">\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h3 className=\"font-semibold text-gray-800\">This Month vs Previous</h3>\n          </div>\n          <div className=\"space-y-4\">\n            <div>\n              <div className=\"flex justify-between items-center mb-2\">\n                <span className=\"text-sm font-medium\">This Month</span>\n                <span className=\"text-sm font-bold\">42.7 kWh ↑ +6%</span>\n              </div>\n              <div className=\"w-full bg-accent rounded-full h-2\"></div>\n            </div>\n            <div>\n              <div className=\"flex justify-between items-center mb-2\">\n                <span className=\"text-sm font-medium text-gray-600\">Previous Month</span>\n                <span className=\"text-sm\">38.7 kWh</span>\n              </div>\n              <div className=\"w-4/5 bg-gray-400 rounded-full h-2\"></div>\n            </div>\n          </div>\n          <div className=\"mt-4\">\n            <p className=\"text-sm text-gray-600 mb-2\">Energy used</p>\n            <p className=\"text-lg font-bold text-gray-800\">18.7 kWh</p>\n            <div className=\"h-24 mt-2 flex items-end justify-center space-x-1\">\n              {[12, 8, 15, 10, 18, 14, 11].map((value, index) => {\n                const isHighlighted = index === 4;\n                const height = (value / Math.max(...[12, 8, 15, 10, 18, 14, 11])) * 70;\n                \n                return (\n                  <div key={index} className=\"flex flex-col items-center\">\n                    <div \n                      className={`w-4 rounded-t transition-all duration-300 ${\n                        isHighlighted \n                          ? 'bg-gradient-to-t from-teal-700 to-teal-600' \n                          : 'bg-gradient-to-t from-sky-400 to-sky-300'\n                      }`}\n                      style={{ height: `${height}%` }}\n                    />\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":11413},"client/src/components/charts/billing-chart.tsx":{"content":"import { useEffect, useRef } from \"react\";\nimport { Chart, registerables } from \"chart.js\";\n\nChart.register(...registerables);\n\ninterface BillingChartProps {\n  data: number[];\n  labels: string[];\n}\n\nexport default function BillingChart({ data, labels }: BillingChartProps) {\n  const chartRef = useRef<HTMLCanvasElement>(null);\n  const chartInstance = useRef<Chart | null>(null);\n\n  useEffect(() => {\n    if (!chartRef.current) return;\n\n    if (chartInstance.current) {\n      chartInstance.current.destroy();\n    }\n\n    const ctx = chartRef.current.getContext(\"2d\");\n    if (!ctx) return;\n\n    chartInstance.current = new Chart(ctx, {\n      type: \"bar\",\n      data: {\n        labels,\n        datasets: [{\n          data,\n          backgroundColor: \"hsl(var(--primary))\",\n          borderRadius: 4,\n          borderWidth: 0,\n        }]\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        scales: {\n          y: { \n            display: true,\n            max: 100,\n            beginAtZero: true,\n            ticks: {\n              callback: (value) => `${value}€`\n            }\n          },\n          x: { \n            display: true, \n            grid: { display: false },\n            border: { display: false },\n          }\n        },\n        plugins: { \n          legend: { display: false },\n          tooltip: {\n            callbacks: {\n              label: (context) => `€${context.parsed.y}`\n            }\n          }\n        }\n      }\n    });\n\n    return () => {\n      if (chartInstance.current) {\n        chartInstance.current.destroy();\n      }\n    };\n  }, [data, labels]);\n\n  return <canvas ref={chartRef} className=\"w-full h-full\" />;\n}\n","size_bytes":1691},"client/src/components/charts/consumption-chart.tsx":{"content":"import { useEffect, useRef } from \"react\";\nimport { Chart, registerables } from \"chart.js\";\n\nChart.register(...registerables);\n\ninterface ConsumptionChartProps {\n  data: number[];\n  labels: string[];\n  highlightIndex?: number;\n}\n\nexport default function ConsumptionChart({ data, labels, highlightIndex = 3 }: ConsumptionChartProps) {\n  const chartRef = useRef<HTMLCanvasElement>(null);\n  const chartInstance = useRef<Chart | null>(null);\n\n  useEffect(() => {\n    if (!chartRef.current) return;\n\n    if (chartInstance.current) {\n      chartInstance.current.destroy();\n    }\n\n    const ctx = chartRef.current.getContext(\"2d\");\n    if (!ctx) return;\n\n    chartInstance.current = new Chart(ctx, {\n      type: \"bar\",\n      data: {\n        labels,\n        datasets: [{\n          data,\n          backgroundColor: data.map((_, index) => \n            index === highlightIndex ? \"hsl(var(--primary))\" : \"hsl(var(--primary-light))\"\n          ),\n          borderRadius: 8,\n          borderWidth: 0,\n        }]\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        scales: {\n          y: { \n            display: false,\n            beginAtZero: true,\n          },\n          x: { \n            display: true, \n            grid: { display: false },\n            border: { display: false },\n          }\n        },\n        plugins: { \n          legend: { display: false },\n          tooltip: {\n            callbacks: {\n              label: (context) => `${context.parsed.y} kWh`\n            }\n          }\n        },\n        elements: {\n          bar: {\n            borderSkipped: false,\n          }\n        }\n      }\n    });\n\n    return () => {\n      if (chartInstance.current) {\n        chartInstance.current.destroy();\n      }\n    };\n  }, [data, labels, highlightIndex]);\n\n  return <canvas ref={chartRef} className=\"w-full h-full\" />;\n}\n","size_bytes":1861},"client/src/components/charts/live-chart.tsx":{"content":"import { useEffect, useRef } from \"react\";\nimport { Chart, registerables } from \"chart.js\";\n\nChart.register(...registerables);\n\ninterface LiveChartProps {\n  data: number[];\n  maxDataPoints?: number;\n}\n\nexport default function LiveChart({ data, maxDataPoints = 20 }: LiveChartProps) {\n  const chartRef = useRef<HTMLCanvasElement>(null);\n  const chartInstance = useRef<Chart | null>(null);\n\n  useEffect(() => {\n    if (!chartRef.current) return;\n\n    if (chartInstance.current) {\n      chartInstance.current.destroy();\n    }\n\n    const ctx = chartRef.current.getContext(\"2d\");\n    if (!ctx) return;\n\n    const labels = Array(maxDataPoints).fill('').map((_, i) => i);\n\n    chartInstance.current = new Chart(ctx, {\n      type: \"line\",\n      data: {\n        labels,\n        datasets: [{\n          data: data.slice(-maxDataPoints),\n          borderColor: \"hsl(var(--primary))\",\n          backgroundColor: \"hsla(var(--primary), 0.1)\",\n          borderWidth: 2,\n          fill: true,\n          tension: 0.4,\n          pointRadius: 0,\n          pointHoverRadius: 4,\n        }]\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        animation: {\n          duration: 0\n        },\n        scales: {\n          y: { \n            display: false,\n            beginAtZero: true,\n          },\n          x: { \n            display: false \n          }\n        },\n        plugins: { \n          legend: { display: false },\n          tooltip: {\n            callbacks: {\n              label: (context) => `${context.parsed.y.toFixed(1)} W`\n            }\n          }\n        },\n        elements: {\n          line: {\n            borderJoinStyle: 'round'\n          }\n        }\n      }\n    });\n\n    return () => {\n      if (chartInstance.current) {\n        chartInstance.current.destroy();\n      }\n    };\n  }, [data, maxDataPoints]);\n\n  // Update chart data when data changes\n  useEffect(() => {\n    if (chartInstance.current && data.length > 0) {\n      chartInstance.current.data.datasets[0].data = data.slice(-maxDataPoints);\n      chartInstance.current.update('none');\n    }\n  }, [data, maxDataPoints]);\n\n  return <canvas ref={chartRef} className=\"w-full h-full\" />;\n}\n","size_bytes":2184},"client/src/components/charts/usage-chart.tsx":{"content":"import { useEffect, useRef } from \"react\";\nimport { Chart, registerables } from \"chart.js\";\n\nChart.register(...registerables);\n\ninterface UsageChartProps {\n  data: {\n    kitchen: number;\n    heating: number;\n    lighting: number;\n    other: number;\n  };\n}\n\nexport default function UsageChart({ data }: UsageChartProps) {\n  const chartRef = useRef<HTMLCanvasElement>(null);\n  const chartInstance = useRef<Chart | null>(null);\n\n  useEffect(() => {\n    if (!chartRef.current) return;\n\n    if (chartInstance.current) {\n      chartInstance.current.destroy();\n    }\n\n    const ctx = chartRef.current.getContext(\"2d\");\n    if (!ctx) return;\n\n    chartInstance.current = new Chart(ctx, {\n      type: \"doughnut\",\n      data: {\n        datasets: [{\n          data: [data.kitchen, data.heating, data.lighting, data.other],\n          backgroundColor: [\n            \"hsl(var(--chart-1))\",\n            \"hsl(var(--chart-2))\",\n            \"hsl(var(--chart-3))\",\n            \"hsl(var(--chart-4))\"\n          ],\n          borderWidth: 0,\n        }]\n      },\n      options: {\n        cutout: \"70%\",\n        plugins: {\n          legend: { display: false }\n        },\n        maintainAspectRatio: false,\n        responsive: true,\n      }\n    });\n\n    return () => {\n      if (chartInstance.current) {\n        chartInstance.current.destroy();\n      }\n    };\n  }, [data]);\n\n  return <canvas ref={chartRef} className=\"w-full h-full\" />;\n}\n","size_bytes":1414},"client/src/components/layout/bottom-navigation.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { Home, TrendingUp, Clock, Euro, Menu } from \"lucide-react\";\n\nexport default function BottomNavigation() {\n  const [location, setLocation] = useLocation();\n\n  const navItems = [\n    { path: \"/home\", icon: Home, label: \"Home\" },\n    { path: \"/trends\", icon: TrendingUp, label: \"Trend\" },\n    { path: \"/realtime\", icon: Clock, label: \"Realtime\" },\n    { path: \"/economics\", icon: Euro, label: \"Economics\" },\n    { path: \"/menu\", icon: Menu, label: \"Menu\" },\n  ];\n\n  return (\n    <nav className=\"fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 z-40 max-w-md mx-auto\">\n      <div className=\"flex justify-around items-center px-2 py-1\">\n        {navItems.map(({ path, icon: Icon, label }) => (\n          <button\n            key={path}\n            className={`tab-button flex flex-col items-center py-2 px-2 min-w-0 flex-1 ${\n              location === path ? \"active\" : \"\"\n            }`}\n            onClick={() => setLocation(path)}\n          >\n            <Icon className=\"h-5 w-5 mb-1\" />\n            <span className=\"text-xs whitespace-nowrap\">{label}</span>\n          </button>\n        ))}\n      </div>\n      <div className=\"absolute bottom-0 left-1/2 transform -translate-x-1/2 w-12 h-1 bg-gray-800 rounded-full\"></div>\n    </nav>\n  );\n}\n","size_bytes":1301},"client/src/components/layout/header.tsx":{"content":"interface HeaderProps {\n  onNotificationsClick: () => void;\n}\n\nexport default function Header({ onNotificationsClick }: HeaderProps) {\n  return (\n    <header className=\"fixed top-8 left-0 right-0 bg-white z-40 px-4 py-4 flex justify-between items-center shadow-sm\">\n      <div className=\"flex items-center space-x-2\">\n        <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center\">\n          <span className=\"text-white font-bold text-sm\">e</span>\n        </div>\n        <span className=\"text-primary font-bold text-lg\">e-snapp</span>\n      </div>\n      <div className=\"flex items-center space-x-3\">\n        <button \n          className=\"relative p-2 hover:bg-gray-100 rounded-full transition-colors\" \n          onClick={onNotificationsClick}\n        >\n          <i className=\"fas fa-bell text-gray-600\"></i>\n          <span className=\"absolute -top-1 -right-1 w-3 h-3 bg-red-500 rounded-full animate-pulse\"></span>\n        </button>\n      </div>\n    </header>\n  );\n}\n","size_bytes":995},"client/src/components/modals/contact-support-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Headphones } from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\n\ninterface ContactSupportModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onOpen: () => void;\n}\n\nconst userId = \"demo-user-1\"; // In a real app, this would come from auth context\n\ninterface FormData {\n  subject: string;\n  message: string;\n}\n\nexport default function ContactSupportModal({ \n  isOpen, \n  onClose,\n  onOpen \n}: ContactSupportModalProps) {\n  const { toast } = useToast();\n  const [subject, setSubject] = useState(\"\");\n  \n  const { register, handleSubmit, reset, formState: { errors } } = useForm<FormData>();\n\n  const submitSupportMutation = useMutation({\n    mutationFn: (data: FormData & { userId: string; subject: string }) =>\n      apiRequest(\"POST\", \"/api/support/contact\", data),\n    onSuccess: () => {\n      toast({\n        title: \"Support request sent\",\n        description: \"We'll get back to you soon!\",\n        duration: 3000,\n      });\n      reset();\n      setSubject(\"\");\n      onClose();\n    },\n    onError: () => {\n      toast({\n        title: \"Failed to send support request\",\n        variant: \"destructive\",\n        duration: 3000,\n      });\n    },\n  });\n\n  const onSubmit = (data: FormData) => {\n    if (!subject) {\n      toast({\n        title: \"Please select a subject\",\n        variant: \"destructive\",\n        duration: 2000,\n      });\n      return;\n    }\n    \n    submitSupportMutation.mutate({\n      ...data,\n      subject,\n      userId,\n    });\n  };\n\n  // Make onOpen available globally for menu access\n  useEffect(() => {\n    (window as any).showContactSupport = onOpen;\n  }, [onOpen]);\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-sm mx-4\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Headphones className=\"h-5 w-5\" />\n            Contact Support\n          </DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-4\">\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Subject\n            </label>\n            <Select value={subject} onValueChange={setSubject}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Select a subject\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"billing\">Billing Issue</SelectItem>\n                <SelectItem value=\"technical\">Technical Problem</SelectItem>\n                <SelectItem value=\"account\">Account Question</SelectItem>\n                <SelectItem value=\"feature\">Feature Request</SelectItem>\n                <SelectItem value=\"other\">Other</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n          \n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Message\n            </label>\n            <Textarea\n              {...register(\"message\", { \n                required: \"Message is required\",\n                minLength: { value: 10, message: \"Message must be at least 10 characters\" }\n              })}\n              rows={4}\n              placeholder=\"Describe your issue or question...\"\n              className={errors.message ? \"border-red-500\" : \"\"}\n            />\n            {errors.message && (\n              <p className=\"text-red-500 text-xs mt-1\">{errors.message.message}</p>\n            )}\n          </div>\n          \n          <div className=\"flex space-x-3\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              className=\"flex-1\"\n              onClick={onClose}\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              className=\"flex-1\"\n              disabled={submitSupportMutation.isPending}\n            >\n              {submitSupportMutation.isPending ? \"Sending...\" : \"Send Message\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":4601},"client/src/components/modals/notification-modal.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Bell, Info, AlertTriangle, CheckCircle, XCircle } from \"lucide-react\";\nimport type { Notification } from \"@shared/schema\";\n\ninterface NotificationModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nconst userId = \"demo-user-1\"; // In a real app, this would come from auth context\n\nexport default function NotificationModal({ isOpen, onClose }: NotificationModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: notifications = [], isLoading } = useQuery<Notification[]>({\n    queryKey: [\"/api/notifications\", userId],\n    enabled: isOpen,\n  });\n\n  const markAsReadMutation = useMutation({\n    mutationFn: (notificationId: string) =>\n      apiRequest(\"PATCH\", `/api/notifications/${notificationId}/read`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/notifications\", userId] });\n      toast({\n        title: \"Notification marked as read\",\n        duration: 2000,\n      });\n    },\n  });\n\n  const getIcon = (type: string) => {\n    switch (type) {\n      case \"warning\":\n        return <AlertTriangle className=\"h-5 w-5 text-orange-500\" />;\n      case \"success\":\n        return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n      case \"error\":\n        return <XCircle className=\"h-5 w-5 text-red-500\" />;\n      default:\n        return <Info className=\"h-5 w-5 text-blue-500\" />;\n    }\n  };\n\n  const formatTimeAgo = (date: string | Date) => {\n    const now = new Date();\n    const notificationDate = new Date(date);\n    const diffInHours = Math.floor((now.getTime() - notificationDate.getTime()) / (1000 * 60 * 60));\n    \n    if (diffInHours < 1) return \"Just now\";\n    if (diffInHours < 24) return `${diffInHours} hours ago`;\n    return `${Math.floor(diffInHours / 24)} days ago`;\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-sm mx-4\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Bell className=\"h-5 w-5\" />\n            Notifications\n          </DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"space-y-3 max-h-96 overflow-y-auto\">\n          {isLoading ? (\n            <div className=\"text-center py-4\">Loading notifications...</div>\n          ) : notifications.length === 0 ? (\n            <div className=\"text-center py-4 text-gray-500\">\n              No notifications yet\n            </div>\n          ) : (\n            notifications.map((notification) => (\n              <div\n                key={notification.id}\n                className={`flex items-start space-x-3 p-3 rounded-lg border transition-colors ${\n                  notification.read \n                    ? \"bg-gray-50 border-gray-200\" \n                    : \"bg-blue-50 border-blue-200\"\n                }`}\n              >\n                {getIcon(notification.type)}\n                <div className=\"flex-1\">\n                  <p className=\"text-sm font-medium text-gray-800\">\n                    {notification.title}\n                  </p>\n                  <p className=\"text-xs text-gray-600 mb-1\">\n                    {notification.message}\n                  </p>\n                  <p className=\"text-xs text-gray-400\">\n                    {formatTimeAgo(notification.createdAt ? notification.createdAt.toString() : new Date().toISOString())}\n                  </p>\n                  {!notification.read && (\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"mt-2 h-6 px-2 text-xs\"\n                      onClick={() => markAsReadMutation.mutate(notification.id)}\n                      disabled={markAsReadMutation.isPending}\n                    >\n                      Mark as read\n                    </Button>\n                  )}\n                </div>\n              </div>\n            ))\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":4260},"client/src/components/modals/notification-settings-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport ToggleSwitch from \"@/components/ui/toggle-switch\";\nimport { Settings } from \"lucide-react\";\nimport type { UserSettings } from \"@shared/schema\";\n\ninterface NotificationSettingsModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onOpen: () => void;\n}\n\nconst userId = \"demo-user-1\"; // In a real app, this would come from auth context\n\nexport default function NotificationSettingsModal({ \n  isOpen, \n  onClose,\n  onOpen \n}: NotificationSettingsModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: settings, isLoading } = useQuery<UserSettings>({\n    queryKey: [\"/api/settings\", userId],\n    enabled: isOpen,\n  });\n\n  const [formData, setFormData] = useState({\n    energyAlerts: false,\n    billingReminders: false,\n    savingsTips: false,\n    systemUpdates: false,\n  });\n\n  useEffect(() => {\n    if (settings) {\n      setFormData({\n        energyAlerts: settings.energyAlerts ?? false,\n        billingReminders: settings.billingReminders ?? false,\n        savingsTips: settings.savingsTips ?? false,\n        systemUpdates: settings.systemUpdates ?? false,\n      });\n    }\n  }, [settings]);\n\n  const updateSettingsMutation = useMutation({\n    mutationFn: (data: typeof formData) =>\n      apiRequest(\"PATCH\", `/api/settings/${userId}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/settings\", userId] });\n      toast({\n        title: \"Settings updated successfully\",\n        duration: 2000,\n      });\n      onClose();\n    },\n    onError: () => {\n      toast({\n        title: \"Failed to update settings\",\n        variant: \"destructive\",\n        duration: 3000,\n      });\n    },\n  });\n\n  const handleToggle = (key: keyof typeof formData) => {\n    setFormData(prev => ({ ...prev, [key]: !prev[key] }));\n  };\n\n  const handleSave = () => {\n    updateSettingsMutation.mutate(formData);\n  };\n\n  // Make onOpen available globally for menu access\n  useEffect(() => {\n    (window as any).showNotificationSettings = onOpen;\n  }, [onOpen]);\n\n  const settingsOptions = [\n    {\n      key: \"energyAlerts\" as const,\n      title: \"Energy Alerts\",\n      description: \"Get notified about high usage\",\n    },\n    {\n      key: \"billingReminders\" as const,\n      title: \"Billing Reminders\",\n      description: \"Monthly billing notifications\",\n    },\n    {\n      key: \"savingsTips\" as const,\n      title: \"Savings Tips\",\n      description: \"Weekly energy saving tips\",\n    },\n    {\n      key: \"systemUpdates\" as const,\n      title: \"System Updates\",\n      description: \"App updates and maintenance\",\n    },\n  ];\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-sm mx-4\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Settings className=\"h-5 w-5\" />\n            Notification Settings\n          </DialogTitle>\n        </DialogHeader>\n        \n        {isLoading ? (\n          <div className=\"text-center py-4\">Loading settings...</div>\n        ) : (\n          <div className=\"space-y-4\">\n            {settingsOptions.map(({ key, title, description }) => (\n              <div key={key} className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"font-medium text-gray-800\">{title}</p>\n                  <p className=\"text-sm text-gray-600\">{description}</p>\n                </div>\n                <ToggleSwitch\n                  checked={formData[key]}\n                  onChange={() => handleToggle(key)}\n                />\n              </div>\n            ))}\n            \n            <Button \n              className=\"w-full mt-6\"\n              onClick={handleSave}\n              disabled={updateSettingsMutation.isPending}\n            >\n              {updateSettingsMutation.isPending ? \"Saving...\" : \"Save Changes\"}\n            </Button>\n          </div>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":4284},"client/src/components/modals/profile-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from \"@/components/ui/collapsible\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { User, Eye, EyeOff, ChevronDown, ChevronUp, Trash2, LogOut } from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport type { User as UserType } from \"@shared/schema\";\n\ninterface ProfileModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onOpen: () => void;\n}\n\nconst userId = \"demo-user-1\"; // In a real app, this would come from auth context\n\ninterface ProfileFormData {\n  name: string;\n  email: string;\n  oldPassword: string;\n  newPassword: string;\n  confirmPassword: string;\n}\n\nexport default function ProfileModal({ isOpen, onClose, onOpen }: ProfileModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [showPasswords, setShowPasswords] = useState(false);\n  const [language, setLanguage] = useState(\"English\");\n  const [isNameEmailOpen, setIsNameEmailOpen] = useState(false);\n  const [isPasswordOpen, setIsPasswordOpen] = useState(false);\n  const [isLanguageOpen, setIsLanguageOpen] = useState(false);\n\n  const { data: user, isLoading } = useQuery<UserType>({\n    queryKey: [\"/api/user\", userId],\n    enabled: isOpen,\n  });\n\n  const { register, handleSubmit, reset, formState: { errors } } = useForm<ProfileFormData>();\n\n  useEffect(() => {\n    if (user) {\n      reset({\n        name: user.name,\n        email: user.email,\n        oldPassword: \"\",\n        newPassword: \"\",\n        confirmPassword: \"\",\n      });\n    }\n  }, [user, reset]);\n\n  const updateProfileMutation = useMutation({\n    mutationFn: (data: Partial<ProfileFormData>) =>\n      apiRequest(\"PATCH\", `/api/user/${userId}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/user\", userId] });\n      toast({\n        title: \"Profile updated successfully\",\n        duration: 2000,\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Failed to update profile\",\n        variant: \"destructive\",\n        duration: 3000,\n      });\n    },\n  });\n\n  const onSubmit = (data: ProfileFormData) => {\n    if (data.newPassword && data.newPassword !== data.confirmPassword) {\n      toast({\n        title: \"Passwords don't match\",\n        variant: \"destructive\",\n        duration: 2000,\n      });\n      return;\n    }\n\n    const updateData: Partial<ProfileFormData> = {\n      name: data.name,\n      email: data.email,\n    };\n\n    if (data.newPassword) {\n      updateData.oldPassword = data.oldPassword;\n      updateData.newPassword = data.newPassword;\n    }\n\n    updateProfileMutation.mutate(updateData);\n  };\n\n  const handleDeleteAccount = () => {\n    if (confirm(\"Are you sure you want to delete your account? This action cannot be undone.\")) {\n      toast({\n        title: \"Account deletion would be implemented here\",\n        duration: 3000,\n      });\n    }\n  };\n\n  const handleLogout = () => {\n    if (confirm(\"Are you sure you want to logout?\")) {\n      // Clear all localStorage data\n      localStorage.clear();\n      // Show toast message\n      toast({\n        title: \"Logged out successfully\",\n        description: \"You have been logged out of your account.\",\n        duration: 2000,\n      });\n      // Redirect to login page after a short delay\n      setTimeout(() => {\n        window.location.href = '/login';\n      }, 1000);\n    }\n  };\n\n  // Make onOpen available globally for menu access\n  useEffect(() => {\n    (window as any).showProfile = onOpen;\n  }, [onOpen]);\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-sm mx-4 max-h-[80vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <User className=\"h-5 w-5\" />\n            My Profile\n          </DialogTitle>\n        </DialogHeader>\n        \n        {isLoading ? (\n          <div className=\"text-center py-4\">Loading profile...</div>\n        ) : (\n          <div className=\"space-y-4\">\n            {/* Profile Card */}\n            <Card className=\"bg-gradient-to-br from-blue-50 to-cyan-50\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center gap-4\">\n                  <div className=\"w-12 h-12 bg-primary rounded-full flex items-center justify-center\">\n                    <User className=\"h-6 w-6 text-white\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <h3 className=\"font-semibold text-gray-800\">\n                      {user?.name || \"Inayat Ali\"}\n                    </h3>\n                    <p className=\"text-sm text-gray-600\">\n                      {user?.email || \"inayatalikatif@gmail.com\"}\n                    </p>\n                  </div>\n                  <div className=\"text-gray-400\">\n                    <ChevronDown className=\"h-5 w-5\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-4\">\n              {/* Edit name & Email */}\n              <Collapsible open={isNameEmailOpen} onOpenChange={setIsNameEmailOpen}>\n                <CollapsibleTrigger asChild>\n                  <Button variant=\"outline\" className=\"w-full justify-between\">\n                    Edit name & Email\n                    {isNameEmailOpen ? <ChevronUp className=\"h-4 w-4\" /> : <ChevronDown className=\"h-4 w-4\" />}\n                  </Button>\n                </CollapsibleTrigger>\n                <CollapsibleContent className=\"space-y-3 mt-3\">\n                  <Input\n                    {...register(\"name\", { required: \"Name is required\" })}\n                    placeholder=\"Full Name\"\n                    className={errors.name ? \"border-red-500\" : \"\"}\n                  />\n                  {errors.name && (\n                    <p className=\"text-red-500 text-xs\">{errors.name.message}</p>\n                  )}\n                  \n                  <Input\n                    {...register(\"email\", { \n                      required: \"Email is required\",\n                      pattern: {\n                        value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n                        message: \"Invalid email address\"\n                      }\n                    })}\n                    type=\"email\"\n                    placeholder=\"Email\"\n                    className={errors.email ? \"border-red-500\" : \"\"}\n                  />\n                  {errors.email && (\n                    <p className=\"text-red-500 text-xs\">{errors.email.message}</p>\n                  )}\n                </CollapsibleContent>\n              </Collapsible>\n\n              {/* Change password */}\n              <Collapsible open={isPasswordOpen} onOpenChange={setIsPasswordOpen}>\n                <CollapsibleTrigger asChild>\n                  <Button variant=\"outline\" className=\"w-full justify-between\">\n                    Change password\n                    {isPasswordOpen ? <ChevronUp className=\"h-4 w-4\" /> : <ChevronDown className=\"h-4 w-4\" />}\n                  </Button>\n                </CollapsibleTrigger>\n                <CollapsibleContent className=\"space-y-3 mt-3\">\n                  <div className=\"relative\">\n                    <Input\n                      {...register(\"oldPassword\")}\n                      type={showPasswords ? \"text\" : \"password\"}\n                      placeholder=\"Old password\"\n                    />\n                  </div>\n                  \n                  <div className=\"relative\">\n                    <Input\n                      {...register(\"newPassword\")}\n                      type={showPasswords ? \"text\" : \"password\"}\n                      placeholder=\"New password\"\n                    />\n                    <Button\n                      type=\"button\"\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"absolute right-2 top-1/2 transform -translate-y-1/2 h-6 w-6 p-0\"\n                      onClick={() => setShowPasswords(!showPasswords)}\n                    >\n                      {showPasswords ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                    </Button>\n                  </div>\n                  \n                  <div className=\"relative\">\n                    <Input\n                      {...register(\"confirmPassword\")}\n                      type={showPasswords ? \"text\" : \"password\"}\n                      placeholder=\"Confirm new password\"\n                    />\n                    <Button\n                      type=\"button\"\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"absolute right-2 top-1/2 transform -translate-y-1/2 h-6 w-6 p-0\"\n                      onClick={() => setShowPasswords(!showPasswords)}\n                    >\n                      {showPasswords ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                    </Button>\n                  </div>\n                </CollapsibleContent>\n              </Collapsible>\n\n              <Button \n                type=\"submit\"\n                className=\"w-full bg-primary hover:bg-primary/90\"\n                disabled={updateProfileMutation.isPending}\n              >\n                {updateProfileMutation.isPending ? \"Saving...\" : \"Save\"}\n              </Button>\n            </form>\n\n            {/* Language */}\n            <Collapsible open={isLanguageOpen} onOpenChange={setIsLanguageOpen}>\n              <CollapsibleTrigger asChild>\n                <Button variant=\"outline\" className=\"w-full justify-between\">\n                  Language\n                  {isLanguageOpen ? <ChevronUp className=\"h-4 w-4\" /> : <ChevronDown className=\"h-4 w-4\" />}\n                </Button>\n              </CollapsibleTrigger>\n              <CollapsibleContent className=\"mt-3\">\n                <Select value={language} onValueChange={setLanguage}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"English\">English</SelectItem>\n                    <SelectItem value=\"Italian\">Italiano</SelectItem>\n                    <SelectItem value=\"Spanish\">Español</SelectItem>\n                    <SelectItem value=\"French\">Français</SelectItem>\n                  </SelectContent>\n                </Select>\n              </CollapsibleContent>\n            </Collapsible>\n\n            {/* Danger Zone */}\n            <div className=\"space-y-3 pt-4 border-t\">\n              <Button\n                variant=\"outline\"\n                className=\"w-full border-gray-300 text-gray-700 hover:bg-gray-100\"\n                onClick={handleDeleteAccount}\n              >\n                <Trash2 className=\"h-4 w-4 mr-2\" />\n                Delete Account\n              </Button>\n              \n              <Button\n                className=\"w-full bg-red-500 hover:bg-red-600 text-white\"\n                onClick={handleLogout}\n              >\n                <LogOut className=\"h-4 w-4 mr-2\" />\n                Logout\n              </Button>\n            </div>\n          </div>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":11725},"client/src/components/modals/tariff-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Leaf, Zap, Star, ChevronRight } from \"lucide-react\";\n\ninterface TariffModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onOpen: () => void;\n}\n\ninterface TariffPlan {\n  id: string;\n  name: string;\n  type: \"green\" | \"standard\";\n  icon: any;\n  duration: string;\n  contractType: string;\n  currentCost: string;\n  savings: string;\n  features: string[];\n  color: string;\n}\n\nconst tariffPlans: TariffPlan[] = [\n  {\n    id: \"green-1\",\n    name: \"Green Energy Plan\",\n    type: \"green\",\n    icon: Leaf,\n    duration: \"12 months\",\n    contractType: \"Monoraria (Fixed)\",\n    currentCost: \"€48.20\",\n    savings: \"€8.80\",\n    features: [\"100% Renewable Energy\", \"Fixed Rate\", \"No Hidden Fees\"],\n    color: \"bg-green-100 text-green-600\"\n  },\n  {\n    id: \"standard-1\",\n    name: \"Enel Flex Control\",\n    type: \"standard\",\n    icon: Zap,\n    duration: \"12 months\",\n    contractType: \"Monoraria (Fixed)\",\n    currentCost: \"€48.20\",\n    savings: \"€8.80\",\n    features: [\"Flexible Pricing\", \"Smart Control\", \"24/7 Support\"],\n    color: \"bg-blue-100 text-blue-600\"\n  },\n  {\n    id: \"green-2\",\n    name: \"Solar Plus Plan\",\n    type: \"green\",\n    icon: Leaf,\n    duration: \"24 months\",\n    contractType: \"Bioraria (Variable)\",\n    currentCost: \"€45.50\",\n    savings: \"€11.50\",\n    features: [\"Solar Integration\", \"Peak/Off-Peak Rates\", \"Green Certificates\"],\n    color: \"bg-green-100 text-green-600\"\n  },\n  {\n    id: \"standard-2\",\n    name: \"Basic Energy\",\n    type: \"standard\",\n    icon: Zap,\n    duration: \"6 months\",\n    contractType: \"Monoraria (Fixed)\",\n    currentCost: \"€52.00\",\n    savings: \"€5.00\",\n    features: [\"Standard Rates\", \"Basic Support\", \"Monthly Billing\"],\n    color: \"bg-blue-100 text-blue-600\"\n  }\n];\n\nexport default function TariffModal({ isOpen, onClose, onOpen }: TariffModalProps) {\n  const { toast } = useToast();\n  const [showAll, setShowAll] = useState(false);\n  const [selectedPlan, setSelectedPlan] = useState<string | null>(null);\n\n  const visiblePlans = showAll ? tariffPlans : tariffPlans.slice(0, 2);\n\n  const handleSelectPlan = (planId: string) => {\n    setSelectedPlan(planId);\n    const plan = tariffPlans.find(p => p.id === planId);\n    toast({\n      title: `${plan?.name} selected`,\n      description: \"Plan selection would be processed here\",\n      duration: 3000,\n    });\n  };\n\n  // Make onOpen available globally for economics page access\n  useEffect(() => {\n    (window as any).showTariffPlans = onOpen;\n  }, [onOpen]);\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-sm mx-4 max-h-[80vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Star className=\"h-5 w-5 text-accent\" />\n            Better Tariffs Available\n          </DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"space-y-4\">\n          {/* Summary Card */}\n          <Card className=\"bg-primary text-white\">\n            <CardContent className=\"p-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"text-center\">\n                  <p className=\"text-sm opacity-90 mb-1\">Annual Cost</p>\n                  <p className=\"text-2xl font-bold\">€920.47</p>\n                  <p className=\"text-xs opacity-80\">Based on your bills</p>\n                </div>\n                <div className=\"text-center\">\n                  <p className=\"text-sm opacity-90 mb-1\">Estimated Savings</p>\n                  <p className=\"text-2xl font-bold\">€120.00</p>\n                  <p className=\"text-xs opacity-80\">per year</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Available Plans */}\n          <div className=\"space-y-3\">\n            {visiblePlans.map((plan) => {\n              const IconComponent = plan.icon;\n              const isSelected = selectedPlan === plan.id;\n              \n              return (\n                <Card \n                  key={plan.id} \n                  className={`card-hover cursor-pointer transition-all duration-200 ${\n                    isSelected ? 'ring-2 ring-primary' : ''\n                  }`}\n                  onClick={() => handleSelectPlan(plan.id)}\n                >\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className={`w-10 h-10 rounded-full flex items-center justify-center ${plan.color}`}>\n                          <IconComponent className=\"h-5 w-5\" />\n                        </div>\n                        <div>\n                          <h4 className=\"font-semibold text-gray-800\">{plan.name}</h4>\n                          <p className=\"text-xs text-gray-500\">{plan.duration}</p>\n                        </div>\n                      </div>\n                      <ChevronRight className=\"h-4 w-4 text-gray-400\" />\n                    </div>\n                    \n                    <div className=\"space-y-2 text-sm\">\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-600\">Type</span>\n                        <span className=\"font-medium\">{plan.contractType}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-600\">If You Used This</span>\n                        <span className=\"font-medium\">{plan.currentCost}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-600\">Savings</span>\n                        <span className=\"font-bold text-green-600\">{plan.savings}</span>\n                      </div>\n                    </div>\n                    \n                    <div className=\"mt-3 flex flex-wrap gap-1\">\n                      {plan.features.map((feature, index) => (\n                        <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                          {feature}\n                        </Badge>\n                      ))}\n                    </div>\n                    \n                    {isSelected && (\n                      <div className=\"mt-3 p-2 bg-primary/10 rounded-lg\">\n                        <p className=\"text-xs text-primary font-medium\">✓ Selected Plan</p>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n\n          {/* Show More/Less Button */}\n          <Button \n            variant=\"outline\" \n            className=\"w-full border-primary text-primary hover:bg-primary hover:text-white\"\n            onClick={() => setShowAll(!showAll)}\n          >\n            {showAll ? \"Show Less\" : \"Show More\"}\n          </Button>\n\n          {/* Action Buttons */}\n          <div className=\"space-y-2 pt-2\">\n            <Button \n              className=\"w-full bg-primary hover:bg-primary/90\"\n              disabled={!selectedPlan}\n              onClick={() => {\n                if (selectedPlan) {\n                  toast({\n                    title: \"Processing plan selection...\",\n                    description: \"You would be redirected to complete the switch\",\n                    duration: 3000,\n                  });\n                  onClose();\n                }\n              }}\n            >\n              {selectedPlan ? \"Continue with Selected Plan\" : \"Select a Plan\"}\n            </Button>\n            \n            <Button \n              variant=\"ghost\" \n              className=\"w-full\"\n              onClick={onClose}\n            >\n              Cancel\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":8175},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle-switch.tsx":{"content":"import { cn } from \"@/lib/utils\";\n\ninterface ToggleSwitchProps {\n  checked: boolean;\n  onChange: (checked: boolean) => void;\n  className?: string;\n}\n\nexport default function ToggleSwitch({ checked, onChange, className }: ToggleSwitchProps) {\n  return (\n    <button\n      type=\"button\"\n      className={cn(\n        \"relative inline-flex h-6 w-11 items-center rounded-full transition-colors focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2\",\n        checked ? \"bg-primary\" : \"bg-gray-200\",\n        className\n      )}\n      onClick={() => onChange(!checked)}\n    >\n      <span\n        className={cn(\n          \"inline-block h-4 w-4 transform rounded-full bg-white transition-transform\",\n          checked ? \"translate-x-6\" : \"translate-x-1\"\n        )}\n      />\n    </button>\n  );\n}\n","size_bytes":801},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/seed.ts":{"content":"import { db } from \"./db\";\nimport { users, energyData, billingData, notifications, userSettings } from \"@shared/schema\";\nimport { eq } from \"drizzle-orm\";\n\nexport async function seedDatabase() {\n  try {\n    // Create demo user\n    const demoUserId = \"demo-user-1\";\n    const demoUser = {\n      id: demoUserId,\n      username: \"inayat\",\n      email: \"inayatalikatif@gmail.com\",\n      name: \"Inayat Ali\",\n      password: \"demo123\",\n    };\n    \n    // Check if user already exists\n    const existingUser = await db.select().from(users).where(eq(users.id, demoUserId)).limit(1);\n    \n    if (existingUser.length === 0) {\n      await db.insert(users).values(demoUser);\n      \n      // Create energy data for the last 7 days\n      const energyDataPoints = [];\n      for (let i = 0; i < 100; i++) {\n        energyDataPoints.push({\n          userId: demoUserId,\n          timestamp: new Date(Date.now() - i * 60000), // Every minute for last 100 minutes\n          activePower: (Math.random() * 100 + 200).toString(),\n          reactivePower: (Math.random() * 50 + 200).toString(),\n          voltage: (220 + Math.random() * 10).toString(),\n          powerFactor: (0.4 + Math.random() * 0.2).toString(),\n          consumption: (Math.random() * 5 + 10).toString(),\n        });\n      }\n      \n      await db.insert(energyData).values(energyDataPoints);\n      \n      // Create billing data\n      await db.insert(billingData).values({\n        userId: demoUserId,\n        period: \"01 Jul - 31 Aug 2025\",\n        currentBill: \"57.00\",\n        energyUsed: \"129.5\",\n        contract: \"Bioraria (F1/F23)\",\n        estimatedFinalBill: \"89.00\",\n        co2Emitted: \"42.7\",\n        co2Avoided: \"12.1\",\n      });\n      \n      // Create notifications\n      const notificationList = [\n        {\n          userId: demoUserId,\n          title: \"Energy Usage Alert\",\n          message: \"Your energy consumption is 15% higher than usual today.\",\n          type: \"warning\",\n        },\n        {\n          userId: demoUserId,\n          title: \"Bill Generated\",\n          message: \"Your monthly bill for July 2024 is ready.\",\n          type: \"info\",\n        },\n        {\n          userId: demoUserId,\n          title: \"Savings Tip\",\n          message: \"You could save €12/month by adjusting your thermostat by 2°C.\",\n          type: \"success\",\n        }\n      ];\n      \n      await db.insert(notifications).values(notificationList);\n      \n      // Create user settings\n      await db.insert(userSettings).values({\n        userId: demoUserId,\n        energyAlerts: true,\n        billingReminders: true,\n        savingsTips: false,\n        systemUpdates: true,\n      });\n      \n      console.log(\"Database seeded successfully!\");\n    } else {\n      console.log(\"Demo user already exists, skipping seed.\");\n    }\n  } catch (error) {\n    console.error(\"Error seeding database:\", error);\n  }\n}","size_bytes":2860},"client/src/pages/settings.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  Bell, \n  CreditCard, \n  Leaf, \n  Settings as SettingsIcon, \n  MessageSquare, \n  LogOut,\n  User,\n  Moon,\n  Sun\n} from \"lucide-react\";\nimport logoImage from \"@assets/e snapp logo 1 (1)_1754149374420.png\";\n\nexport default function SettingsPage() {\n  const [isVisible, setIsVisible] = useState(false);\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [supportForm, setSupportForm] = useState({ subject: \"\", message: \"\" });\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  useEffect(() => {\n    setIsVisible(true);\n  }, []);\n\n  // Fetch user settings\n  const { data: settings, isLoading: settingsLoading } = useQuery<any>({\n    queryKey: ['/api/settings/demo-user-1'],\n  });\n\n  // Fetch user data\n  const { data: user } = useQuery<any>({\n    queryKey: ['/api/user/demo-user-1'],\n  });\n\n  // Update settings mutation\n  const updateSettingsMutation = useMutation({\n    mutationFn: async (newSettings: any) => {\n      const response = await fetch('/api/settings/demo-user-1', {\n        method: 'PATCH',\n        body: JSON.stringify(newSettings),\n        headers: { 'Content-Type': 'application/json' },\n      });\n      if (!response.ok) throw new Error('Failed to update settings');\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Settings Updated\",\n        description: \"Your preferences have been saved successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/settings/demo-user-1'] });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update settings. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Submit support request mutation\n  const submitSupportMutation = useMutation({\n    mutationFn: async (supportData: any) => {\n      const response = await fetch('/api/support/contact', {\n        method: 'POST',\n        body: JSON.stringify({ ...supportData, userId: 'demo-user-1' }),\n        headers: { 'Content-Type': 'application/json' },\n      });\n      if (!response.ok) throw new Error('Failed to submit support request');\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Support Request Sent\",\n        description: \"We'll get back to you soon.\",\n      });\n      setSupportForm({ subject: \"\", message: \"\" });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to send support request. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSettingChange = (setting: string, value: boolean) => {\n    updateSettingsMutation.mutate({ [setting]: value });\n  };\n\n  const handleSupportSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (supportForm.subject && supportForm.message) {\n      submitSupportMutation.mutate(supportForm);\n    }\n  };\n\n  const handleLogout = () => {\n    // Clear localStorage and redirect to login\n    localStorage.clear();\n    window.location.href = '/login';\n  };\n\n  return (\n    <div className=\"max-w-md mx-auto px-4 space-y-4 pb-20\">\n      {/* Logo Section */}\n      <div className={`flex justify-center mb-4 transition-all duration-700 ${isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 -translate-y-4'}`}>\n        <img \n          src={logoImage} \n          alt=\"e-snapp\" \n          className=\"h-12 w-auto\"\n        />\n      </div>\n\n      {/* Header */}\n      <div className={`text-center mb-6 transition-all duration-700 delay-200 ${isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-4'}`}>\n        <h1 className=\"text-2xl font-bold text-gray-800 mb-2\">Settings</h1>\n        <p className=\"text-gray-600\">Manage your preferences and account</p>\n      </div>\n\n      {/* Profile Card */}\n      <Card className={`transition-all duration-700 delay-300 ${isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-4'} hover:shadow-lg`}>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2 text-lg\">\n            <User className=\"h-5 w-5 text-primary\" />\n            Profile Information\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {user ? (\n            <>\n              <div>\n                <Label className=\"text-sm font-medium text-gray-600\">Name</Label>\n                <p className=\"text-gray-800 font-medium\">{user.name}</p>\n              </div>\n              <div>\n                <Label className=\"text-sm font-medium text-gray-600\">Email</Label>\n                <p className=\"text-gray-800 font-medium\">{user.email}</p>\n              </div>\n              <div>\n                <Label className=\"text-sm font-medium text-gray-600\">Username</Label>\n                <p className=\"text-gray-800 font-medium\">@{user.username}</p>\n              </div>\n            </>\n          ) : (\n            <div className=\"space-y-2\">\n              <div className=\"h-4 bg-gray-200 rounded animate-pulse\"></div>\n              <div className=\"h-4 bg-gray-200 rounded animate-pulse w-3/4\"></div>\n              <div className=\"h-4 bg-gray-200 rounded animate-pulse w-1/2\"></div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Notification Settings */}\n      <Card className={`transition-all duration-700 delay-400 ${isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-4'} hover:shadow-lg`}>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2 text-lg\">\n            <Bell className=\"h-5 w-5 text-primary\" />\n            Notification Preferences\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {settingsLoading ? (\n            <div className=\"space-y-3\">\n              {[1, 2, 3, 4].map((i) => (\n                <div key={i} className=\"flex items-center justify-between\">\n                  <div className=\"h-4 bg-gray-200 rounded animate-pulse w-1/2\"></div>\n                  <div className=\"h-6 w-10 bg-gray-200 rounded-full animate-pulse\"></div>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label className=\"font-medium\">Energy Alerts</Label>\n                  <p className=\"text-sm text-gray-600\">Get notified about unusual energy consumption</p>\n                </div>\n                <Switch\n                  checked={settings?.energyAlerts || false}\n                  onCheckedChange={(checked) => handleSettingChange('energyAlerts', checked)}\n                />\n              </div>\n              \n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label className=\"font-medium\">Billing Reminders</Label>\n                  <p className=\"text-sm text-gray-600\">Receive monthly billing notifications</p>\n                </div>\n                <Switch\n                  checked={settings?.billingReminders || false}\n                  onCheckedChange={(checked) => handleSettingChange('billingReminders', checked)}\n                />\n              </div>\n              \n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label className=\"font-medium\">Savings Tips</Label>\n                  <p className=\"text-sm text-gray-600\">Get personalized energy saving recommendations</p>\n                </div>\n                <Switch\n                  checked={settings?.savingsTips || false}\n                  onCheckedChange={(checked) => handleSettingChange('savingsTips', checked)}\n                />\n              </div>\n              \n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label className=\"font-medium\">System Updates</Label>\n                  <p className=\"text-sm text-gray-600\">App updates and maintenance notifications</p>\n                </div>\n                <Switch\n                  checked={settings?.systemUpdates || false}\n                  onCheckedChange={(checked) => handleSettingChange('systemUpdates', checked)}\n                />\n              </div>\n            </>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Support Contact */}\n      <Card className={`transition-all duration-700 delay-500 ${isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-4'} hover:shadow-lg`}>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2 text-lg\">\n            <MessageSquare className=\"h-5 w-5 text-primary\" />\n            Contact Support\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSupportSubmit} className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"subject\">Subject</Label>\n              <Input\n                id=\"subject\"\n                placeholder=\"What can we help you with?\"\n                value={supportForm.subject}\n                onChange={(e) => setSupportForm(prev => ({ ...prev, subject: e.target.value }))}\n                required\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"message\">Message</Label>\n              <Textarea\n                id=\"message\"\n                placeholder=\"Describe your issue or question in detail...\"\n                rows={3}\n                value={supportForm.message}\n                onChange={(e) => setSupportForm(prev => ({ ...prev, message: e.target.value }))}\n                required\n              />\n            </div>\n            <Button \n              type=\"submit\" \n              className=\"w-full hover:scale-105 transition-all duration-200\"\n              disabled={submitSupportMutation.isPending}\n            >\n              {submitSupportMutation.isPending ? (\n                <>\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                  Sending...\n                </>\n              ) : (\n                'Send Support Request'\n              )}\n            </Button>\n          </form>\n        </CardContent>\n      </Card>\n\n      {/* Logout Button */}\n      <Card className={`transition-all duration-700 delay-600 ${isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-4'} hover:shadow-lg border-red-200`}>\n        <CardContent className=\"p-4\">\n          <Button \n            onClick={handleLogout}\n            variant=\"destructive\" \n            className=\"w-full hover:scale-105 transition-all duration-200 flex items-center gap-2\"\n          >\n            <LogOut className=\"h-4 w-4\" />\n            Logout\n          </Button>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":11229},"client/src/pages/login.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { ArrowLeft, Eye, EyeOff, Loader2 } from \"lucide-react\";\n\nexport default function LoginPage() {\n  const [, setLocation] = useLocation();\n  const [showPassword, setShowPassword] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isVisible, setIsVisible] = useState(false);\n  const [formData, setFormData] = useState({\n    email: \"\",\n    password: \"\",\n    rememberMe: false\n  });\n\n  useEffect(() => {\n    setIsVisible(true);\n  }, []);\n\n  const handleLogin = async () => {\n    setIsLoading(true);\n    \n    // Simulate API call\n    await new Promise(resolve => setTimeout(resolve, 1500));\n    \n    localStorage.setItem('isLoggedIn', 'true');\n    localStorage.setItem('userEmail', formData.email);\n    setLocation(\"/onboarding\");\n  };\n\n  const handleGoogleLogin = () => {\n    // Demo Google login\n    localStorage.setItem('isLoggedIn', 'true');\n    localStorage.setItem('loginMethod', 'google');\n    setLocation(\"/onboarding\");\n  };\n\n  const handleAppleLogin = () => {\n    // Demo Apple login\n    localStorage.setItem('isLoggedIn', 'true');\n    localStorage.setItem('loginMethod', 'apple');\n    setLocation(\"/onboarding\");\n  };\n\n  return (\n    <div className=\"min-h-screen bg-primary max-w-md mx-auto\">\n      {/* Header */}\n      <div className=\"bg-primary text-white p-4\">\n        <div className=\"flex items-center space-x-3\">\n          <ArrowLeft className=\"h-6 w-6 cursor-pointer hover:scale-110 transition-transform\" />\n          <h1 className=\"text-xl font-semibold\">Sign In</h1>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className={`bg-white rounded-t-3xl mt-6 px-4 pt-6 pb-4 min-h-[calc(100vh-100px)] transform transition-all duration-700 ${isVisible ? 'translate-y-0 opacity-100' : 'translate-y-8 opacity-0'}`}>\n        <div className=\"space-y-4\">\n          <div className=\"space-y-1\">\n            <h2 className=\"text-xl font-bold text-gray-900\">Welcome Back!</h2>\n            <p className=\"text-gray-600 text-sm\">To keep Connected please login with</p>\n            <p className=\"text-gray-600 text-sm\">your person info</p>\n          </div>\n\n          <div className=\"space-y-3\">\n            <Input\n              type=\"email\"\n              placeholder=\"Email Address\"\n              value={formData.email}\n              onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}\n              className=\"h-12 rounded-xl border-gray-200\"\n            />\n            \n            <div className=\"relative\">\n              <Input\n                type={showPassword ? \"text\" : \"password\"}\n                placeholder=\"Password\"\n                value={formData.password}\n                onChange={(e) => setFormData(prev => ({ ...prev, password: e.target.value }))}\n                className=\"h-12 rounded-xl border-gray-200 pr-12\"\n              />\n              <button\n                type=\"button\"\n                onClick={() => setShowPassword(!showPassword)}\n                className=\"absolute right-3 top-1/2 transform -translate-y-1/2\"\n              >\n                {showPassword ? (\n                  <EyeOff className=\"h-4 w-4 text-gray-400\" />\n                ) : (\n                  <Eye className=\"h-4 w-4 text-gray-400\" />\n                )}\n              </button>\n            </div>\n          </div>\n\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-2\">\n              <Checkbox \n                checked={formData.rememberMe}\n                onCheckedChange={(checked) => setFormData(prev => ({ ...prev, rememberMe: !!checked }))}\n              />\n              <span className=\"text-sm text-gray-600\">Remember me</span>\n            </div>\n            <button className=\"text-sm text-red-500 font-medium\">\n              Forgot Password?\n            </button>\n          </div>\n\n          <Button\n            onClick={handleLogin}\n            disabled={isLoading}\n            className=\"w-full h-12 bg-primary hover:bg-primary/90 text-white rounded-xl font-semibold hover:scale-105 active:scale-95 transition-all disabled:scale-100\"\n          >\n            {isLoading ? (\n              <>\n                <Loader2 className=\"h-5 w-5 animate-spin mr-2\" />\n                Signing In...\n              </>\n            ) : (\n              \"Sign In\"\n            )}\n          </Button>\n\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex-1 h-px bg-gray-300\"></div>\n            <span className=\"text-gray-500 text-sm\">Or continue with</span>\n            <div className=\"flex-1 h-px bg-gray-300\"></div>\n          </div>\n\n          <div className=\"space-y-3\">\n            <Button\n              onClick={handleGoogleLogin}\n              variant=\"outline\"\n              className=\"w-full h-12 rounded-xl border-gray-200 text-gray-700 font-medium hover:scale-105 active:scale-95 transition-all hover:border-primary hover:text-primary\"\n            >\n              <svg className=\"mr-3 h-5 w-5\" viewBox=\"0 0 24 24\">\n                <path fill=\"#4285F4\" d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"/>\n                <path fill=\"#34A853\" d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"/>\n                <path fill=\"#FBBC05\" d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"/>\n                <path fill=\"#EA4335\" d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"/>\n              </svg>\n              Sign in with Google\n            </Button>\n            \n            <Button\n              onClick={handleAppleLogin}\n              variant=\"outline\"\n              className=\"w-full h-12 rounded-xl border-gray-200 text-gray-700 font-medium hover:scale-105 active:scale-95 transition-all hover:border-primary hover:text-primary\"\n            >\n              <svg className=\"mr-3 h-5 w-5\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                <path d=\"M12.152 6.896c-.948 0-2.415-1.078-3.96-1.04-2.04.027-3.91 1.183-4.961 3.014-2.117 3.675-.546 9.103 1.519 12.09 1.013 1.454 2.208 3.09 3.792 3.039 1.52-.065 2.09-.987 3.935-.987 1.831 0 2.35.987 3.96.948 1.637-.026 2.676-1.48 3.676-2.948 1.156-1.688 1.636-3.325 1.662-3.415-.039-.013-3.182-1.221-3.22-4.857-.026-3.04 2.48-4.494 2.597-4.559-1.429-2.09-3.623-2.324-4.39-2.376-2-.156-3.675 1.09-4.61 1.09zM15.53 3.83c.843-1.012 1.4-2.427 1.245-3.83-1.207.052-2.662.805-3.532 1.818-.78.896-1.454 2.338-1.273 3.714 1.338.104 2.715-.688 3.559-1.701\"/>\n              </svg>\n              Sign in with Apple\n            </Button>\n          </div>\n\n          <div className=\"text-center pt-8\">\n            <span className=\"text-gray-600\">Don't have an account? </span>\n            <button \n              onClick={() => setLocation(\"/signup\")}\n              className=\"text-primary font-semibold underline\"\n            >\n              Sign up\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":7408},"client/src/pages/onboarding.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport onboarding1Image from \"@assets/Rectangle 95 (1)_1754180967613.png\";\nimport onboarding2Image from \"@assets/Rectangle 95 (2)_1754181269813.png\";\nimport onboarding3Image from \"@assets/Rectangle 95 (3)_1754181269812.png\";\n\nexport default function OnboardingPage() {\n  const [, setLocation] = useLocation();\n  const [currentStep, setCurrentStep] = useState(0);\n  const [isVisible, setIsVisible] = useState(false);\n\n  useEffect(() => {\n    setIsVisible(true);\n  }, [currentStep]);\n\n  const onboardingSteps = [\n    {\n      image: onboarding1Image,\n      title: \"Smart Energy Monitoring\",\n      description: \"Monitor your home's energy consumption in real-time with advanced smart technology.\",\n      bgColor: \"bg-gradient-to-br from-blue-400 to-blue-600\"\n    },\n    {\n      image: onboarding2Image, \n      title: \"Smart Home Control\",\n      description: \"Control and manage your smart home devices with intuitive energy monitoring tools.\",\n      bgColor: \"bg-gradient-to-br from-green-400 to-green-600\"\n    },\n    {\n      image: onboarding3Image,\n      title: \"Sustainable Living\", \n      description: \"Make eco-friendly choices with real-time energy insights and renewable energy tracking.\",\n      bgColor: \"bg-gradient-to-br from-gray-400 to-gray-600\"\n    }\n  ];\n\n  const handleNext = () => {\n    setIsVisible(false);\n    setTimeout(() => {\n      if (currentStep < onboardingSteps.length - 1) {\n        setCurrentStep(currentStep + 1);\n      } else {\n        localStorage.setItem('onboardingCompleted', 'true');\n        setLocation(\"/login\");\n      }\n    }, 300);\n  };\n\n  const handleSkip = () => {\n    localStorage.setItem('onboardingCompleted', 'true');\n    setLocation(\"/login\");\n  };\n\n  const currentStepData = onboardingSteps[currentStep];\n\n  return (\n    <div className=\"h-screen bg-white max-w-sm mx-auto flex flex-col overflow-hidden\">\n      {/* Image Section - mengoptimalkan untuk layar HP */}\n      <div className=\"flex-1 flex items-center justify-center p-4 bg-white\">\n        <div className={`transform transition-all duration-700 ${isVisible ? 'scale-100 opacity-100' : 'scale-95 opacity-0'}`}>\n          <img \n            src={currentStepData.image}\n            alt={currentStepData.title}\n            className=\"w-full h-auto max-w-xs object-contain rounded-2xl\"\n          />\n        </div>\n      </div>\n\n      {/* Content Section - compact untuk HP */}\n      <div className=\"bg-white px-6 pb-8 pt-4 space-y-6\">\n        <div className={`transform transition-all duration-500 delay-200 ${isVisible ? 'translate-y-0 opacity-100' : 'translate-y-4 opacity-0'}`}>\n          <h2 className=\"text-xl font-bold text-gray-900 mb-3 text-center\">\n            Track Live Consumption\n          </h2>\n          <p className=\"text-gray-600 text-center leading-relaxed text-sm px-2\">\n            Lorem Ipsum Dolor Sit Amet Consectetur. Quis Tortor Risus Lacus.\n          </p>\n        </div>\n\n        {/* Navigation Buttons */}\n        <div className=\"space-y-3\">\n          <Button \n            onClick={handleNext}\n            className=\"w-full bg-teal-600 hover:bg-teal-700 text-white py-3 text-base font-medium transition-all duration-200 hover:scale-[1.02] rounded-xl\"\n          >\n            Next\n          </Button>\n          \n          <button\n            onClick={handleSkip}\n            className=\"w-full text-teal-600 py-2 text-base font-medium hover:text-teal-700 transition-colors\"\n          >\n            Skip\n          </button>\n        </div>\n\n        {/* Progress Dots */}\n        <div className=\"flex justify-center space-x-2\">\n          {onboardingSteps.map((_, index) => (\n            <div\n              key={index}\n              className={`w-2 h-2 rounded-full transition-all duration-300 ${\n                index === currentStep ? 'bg-teal-600 w-6' : 'bg-gray-300'\n              }`}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":4011},"client/src/pages/splash.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport logoImage from \"@assets/e snapp logo 1 (1)_1754180526051.png\";\n\nexport default function SplashPage() {\n  const [, setLocation] = useLocation();\n  const [logoVisible, setLogoVisible] = useState(false);\n\n  useEffect(() => {\n    console.log('🎬 Splash screen loaded - simple centered logo');\n    \n    // Animate logo entrance\n    setTimeout(() => {\n      setLogoVisible(true);\n    }, 300);\n\n    // Navigate after splash (langsung ke onboarding dulu)\n    const navTimer = setTimeout(() => {\n      sessionStorage.setItem('splashShown', 'true');\n      setLocation(\"/onboarding\");\n    }, 2500);\n\n    return () => {\n      clearTimeout(navTimer);\n    };\n  }, [setLocation]);\n\n  return (\n    <div className=\"min-h-screen bg-white max-w-md mx-auto flex items-center justify-center\">\n      {/* Logo centered - menggunakan gambar asli */}\n      <div className={`transform transition-all duration-1000 ${logoVisible ? 'scale-100 opacity-100' : 'scale-90 opacity-0'}`}>\n        <img \n          src={logoImage} \n          alt=\"e-snapp\" \n          className=\"w-48 h-auto\"\n        />\n      </div>\n    </div>\n  );\n}","size_bytes":1188}}}